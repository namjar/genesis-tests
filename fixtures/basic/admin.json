{
    "name": "System",
    "data": [
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#sort#==1){\n\tSetVar(sort_name, \"id asc\")\n}.ElseIf(#sort#==2){\n\tSetVar(sort_name, \"id desc\")\n}.ElseIf(#sort#==3){\n\tSetVar(sort_name, \"name asc\")\n}.ElseIf(#sort#==4){\n\tSetVar(sort_name, \"name desc\")\n}.Else{\n\tSetVar(sort, \"1\")\n\tSetVar(sort_name, \"id asc\") \n}\n\nIf(Or(#width#==12,#width#==6,#width#==4)){\n}.Else{\n\tSetVar(width, \"12\")\n}\n\nForm(){\n\tDiv(clearfix){\n\t\tDiv(pull-left){\n            DBFind(applications,apps)\n\t\t\tSelect(Name:AppId, Source:apps, NameColumn: name, ValueColumn: id, Value: #buffer_value_app_id#, Class: bg-gray)\n\t\t}\n\t\tDiv(pull-left){\n\t\t\tButton(Class: fa fa-play btn bg-gray ml-sm, Page: #admin_page#, PageParams: \"sort=#sort#,width=#width#,current_page=#current_page#\", Contract: @1SelectApp, Params: \"ApplicationId=Val(AppId)\")\n\t\t}\n\t\tDiv(pull-right){\n\t\t\tIf(#sort#==1){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=2,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}.ElseIf(#sort#==2){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by ID, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}.Else{\n\t\t\t\tSpan(Button(Body: Sort by ID, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=1,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}\n\t\t\tIf(#sort#==3){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-down) Sort by NAME, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=4,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}.ElseIf(#sort#==4){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-long-arrow-up) Sort by NAME, Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}.Else{\n\t\t\t\tSpan(Button(Body: Sort by NAME, Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=3,width=#width#,current_page=#current_page#\")).Style(margin-left:5px;)\n\t\t\t}\n\t\t}\n\t\tDiv(pull-right){\n\t\t\tIf(#width#==12){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-right:5px;)\n\t\t\t}.Else{\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=12,current_page=#current_page#\")).Style(margin-right:5px;)\n\t\t\t}\n\t\t\tIf(#width#==6){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-right:5px;)\n\t\t\t}.Else{\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=6,current_page=#current_page#\")).Style(margin-right:5px;)\n\t\t\t}\n\t\t\tIf(#width#==4){\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-right:5px;)\n\t\t\t}.Else{\n\t\t\t\tSpan(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"sort=#sort#,width=4,current_page=#current_page#\")).Style(margin-right:5px;)\n\t\t\t}\n\t\t}\n\t}\n}",
            "Name": "admin_link",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n\nIf(#buffer_value_app_id# > 0){\n    DBFind(pages, src_pages).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_pages)\n    DBFind(blocks, src_blocks).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_blocks)\n    DBFind(app_params, src_parameters).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_parameters)\n    DBFind(languages, src_languages).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_languages)\n    DBFind(contracts, src_contracts).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_contracts)\n    DBFind(tables, src_tables).Where(\"app_id=#buffer_value_app_id#\").Limit(250).Order(\"name\").Count(count_tables)\n}\n\nDiv(panel panel-primary){\n    If(#buffer_value_app_id# > 0){\n\t    Div(panel-heading, \"Export - #buffer_value_app_name#\")\n    }.Else{\n        Div(panel-heading, \"Export\") \n    }\n\tForm(){\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Pages\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_pages# > 0){\n                        Span(\"(#count_pages#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_pages# > 0){\n                        ForList(src_pages){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Blocks\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_blocks# > 0){\n                        Span(\"(#count_blocks#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_blocks# > 0){\n                        ForList(src_blocks){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n\t\t\t\t\tSpan(\"Menu\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#buffer_value_app_id# > 0){\n                        Span(\"(#buffer_value_count_menu#)\")\n                    }.Else{\n                        Span(\"(0)\")\n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(And(#buffer_value_app_id#>0,#buffer_value_count_menu#>0)){\n                        Span(Class: text-muted h6, Body:\"#buffer_value_menu_name#\")\n                    }.Else{\n                        Span(Class: text-muted h6, Body:\"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Parameters\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_parameters# > 0){\n                        Span(\"(#count_parameters#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_parameters# > 0){\n                        ForList(src_parameters){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Language resources\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_languages# > 0){\n                        Span(\"(#count_languages#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_languages# > 0){\n                        ForList(src_languages){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Contracts\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_contracts# > 0){\n                        Span(\"(#count_contracts#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_contracts# > 0){\n                        ForList(src_contracts){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(list-group-item){\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-10 mc-sm text-left){\n                    Span(\"Tables\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-2 mc-sm text-right){\n                    If(#count_tables# > 0){\n                        Span(\"(#count_tables#)\")\n                    }.Else{\n                        Span(\"(0)\")  \n                    }\n\t\t\t\t} \n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mc-sm text-left){\n                    If(#count_tables# > 0){\n                        ForList(src_tables){\n                            Span(Class: text-muted h6, Body: \"#name#, \")\n                        }\n                    }.Else{\n                        Span(Class: text-muted h6, Body: \"Nothing selected\")\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        If(#buffer_value_app_id# > 0){\n            Div(panel-footer clearfix){\n                Div(pull-right){\n                    Button(Body: Export, Class: btn btn-primary, Page: export_download, Contract: @1Export)\n                }\n            }\n        }\n\t}\n}",
            "Name": "export_info",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(And(#res_type#!=\"pages\",#res_type#!=\"blocks\",#res_type#!=\"menu\",#res_type#!=\"parameters\",#res_type#!=\"languages\",#res_type#!=\"contracts\",#res_type#!=\"tables\")){\n    SetVar(res_type, \"pages\")\n}\n\nDiv(breadcrumb){\n    If(#res_type#==\"pages\"){\n        Span(Class: text-muted, Body: \"Pages\")\n    }.Else{\n        LinkPage(Body: \"Pages\", Page: export_resources,, \"res_type=pages\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"blocks\"){\n        Span(Class: text-muted, Body: \"Blocks\")\n    }.Else{\n        LinkPage(Body: \"Blocks\", Page: export_resources,, \"res_type=blocks\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"menu\"){\n        Span(Class: text-muted, Body: \"Menu\")\n    }.Else{\n       LinkPage(Body: \"Menu\", Page: export_resources,, \"res_type=menu\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"parameters\"){\n        Span(Class: text-muted, Body: \"Application parameters\")\n    }.Else{\n       LinkPage(Body: \"Application parameters\", Page: export_resources,, \"res_type=parameters\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"languages\"){\n        Span(Class: text-muted, Body: \"Language resources\")\n    }.Else{\n       LinkPage(Body: \"Language resources\", Page: export_resources,, \"res_type=languages\")\n    }\n    Span(|,mh-sm)\n    If(#res_type#==\"contracts\"){\n        Span(Class: text-muted, Body: \"Contracts\")\n    }.Else{\n       LinkPage(Body: \"Contracts\", Page: export_resources,, \"res_type=contracts\")\n    } \n    Span(|,mh-sm)\n    If(#res_type#==\"tables\"){\n        Span(Class: text-muted, Body: \"Tables\")\n    }.Else{\n       LinkPage(Body: \"Tables\", Page: export_resources,, \"res_type=tables\")\n    }\n}",
            "Name": "export_link",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(#pager_table#, src_records).Where(#pager_where#).Count(records_count)\n\t\nSetVar(previous_page, Calculate(Exp: #current_page# - 1, Type: int))\nSetVar(next_page, Calculate(Exp: #current_page# + 1, Type: int))\nSetVar(count_div_limit_int, Calculate(Exp: (#records_count# / #pager_limit#), Type: int))\nSetVar(remainder, Calculate(Exp: (#records_count# / #pager_limit#) - #count_div_limit_int#, Type: float))\n\nIf(#remainder# != 0){\n    SetVar(last_page, Calculate(Exp: #count_div_limit_int# + 1, Type: int))\n}.Else{\n    SetVar(last_page, #count_div_limit_int#)\n}\n\nSetVar(last_page_plus_one, Calculate(Exp: #last_page# + 1, Type: int))\nSetVar(delta_last_page, Calculate(Exp: #last_page# - #current_page#))\nSetVar(range_l, Calculate(Exp: #current_page# - 4, Type: int))\nSetVar(range_r, Calculate(Exp: #current_page# + 6, Type: int))\nSetVar(range_l_max, Calculate(Exp: #last_page# - #pager_limit#, Type: int))\nSetVar(pager_limit_plus_one, Calculate(Exp: #pager_limit# + 1, Type: int))\n\nIf(#current_page# < 5){\n    If(#last_page# >= 10){\n        Range(src_pages, 1, 11)\n    }.Else{\n        Range(src_pages, 1, #last_page_plus_one#) \n    }\n}.ElseIf(#delta_last_page# < 6){\n    If(#range_l_max# > 0){\n        Range(src_pages, #range_l_max#, #last_page_plus_one#)\n    }.Else{\n        Range(src_pages, 1, #last_page_plus_one#)\n    }\n}.Else{\n    Range(src_pages, #range_l#, #range_r#)\n}\n\nDiv(){\n    Span(){\n        If(#current_page# == 1){\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-double-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=1,sort=#sort#,width=#width#,page_params=#page_params#\")\n        }\n    }\n    Span(){\n        If(#current_page# == 1){\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-left), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#previous_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\n        }\n    }\n    ForList(src_pages){\n        Span(){\n            If(#id# == #current_page#){\n                Button(Body: #id#, Class: btn btn-primary float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#,page_params=#page_params#\")\n            }.Else{\n                Button(Body: #id#, Class: btn btn-default float-left, Page: #pager_page#, PageParams: \"current_page=#id#,sort=#sort#,width=#width#,page_params=#page_params#\")\n            }\n        }\n    }\n    Span(){\n        If(#current_page# == #last_page#){\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#next_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\n        }\n    }\n    Span(){\n        If(#current_page# == #last_page#){\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default disabled)\n        }.Else{\n            Button(Body: Em(Class: fa fa-angle-double-right), Class: btn btn-default, Page: #pager_page#, PageParams: \"current_page=#last_page#,sort=#sort#,width=#width#,page_params=#page_params#\")\n        }\n    }\n}.Style(\"div {display:inline-block;}\")",
            "Name": "pager",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#current_page# > 0){}.Else{\n\tSetVar(current_page, 1)\n}\nSetVar(pager_offset, Calculate(Exp: (#current_page# - 1) * #pager_limit#, Type: int))\nSetVar(current_page, #current_page#)",
            "Name": "pager_header",
            "Type": "blocks"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:\"Application\", Page:apps_list, Icon:\"icon-folder\")\nMenuItem(Title:\"Ecosystem parameters\", Page:params_list, Icon:\"icon-settings\")\nMenuItem(Title:\"Menu\", Page:menus_list, Icon:\"icon-list\")\nMenuItem(Title:\"Confirmations\", Page:confirmations, Icon:\"icon-check\")\nMenuItem(Title:\"Import\", Page:import_upload, Icon:\"icon-cloud-upload\")\nMenuItem(Title:\"Export\", Page:export_select, Icon:\"icon-cloud-download\")\nMenuGroup(Title:\"Resources\", Icon:\"icon-share\"){\n    MenuItem(Title:\"Pages\", Page:app_pages, Icon:\"icon-screen-desktop\")\n    MenuItem(Title:\"Blocks\", Page:app_blocks, Icon:\"icon-grid\")\n    MenuItem(Title:\"Tables\", Page:app_tables, Icon:\"icon-docs\")\n    MenuItem(Title:\"Contracts\", Page:app_contracts, Icon:\"icon-briefcase\")\n    MenuItem(Title:\"Application parameters\", Page:app_params, Icon:\"icon-wrench\")\n    MenuItem(Title:\"Language resources\", Page:app_langres, Icon:\"icon-globe\")\n    MenuItem(Title:\"Binary data\", Page:app_binary, Icon:\"icon-layers\")\n}\nMenuItem(Title:\"Dashboard\", Page:admin_dashboard, Icon:\"icon-wrench\")",
            "Name": "admin_menu",
            "Type": "menu"
        },
        {
            "Name": "buffer_data",
            "Columns": "[{\"name\":\"key\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"value\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "SetVar(this_page,admin_dashboard).(deleters_count,0)\nDBFind(contracts).Where(\"name='ItemChangeAppId'\").Count(changer_count).Ecosystem(1)\nDBFind(applications,src_apps).Where(\"deleted=0\").Order(id).Count(apps_count)\nIf(And(GetVar(Restore),GetVar(Table),GetVar(Id))){\n    Form(){\n        Select(Name:AppId, NameColumn: name, ValueColumn: id, Source: src_apps, Class:mb)\n        Div(){\n            Button(Class: btn btn-default, Page: #this_page#, PageParams: \"appid=0\", Body: LangRes(cancel))\n            If(#ecosystem_id#==1){\n                Button(Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"appid=Val(AppId)\", Contract: ItemChangeAppId, Params: \"Table=#Table#,Id=#Id#,AppId=Val(AppId)\", Body: LangRes(confirm))\n            }.Else{\n                Button(Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"appid=Val(AppId)\", Contract: @1ItemChangeAppId, Params: \"Table=#Table#,Id=#Id#,AppId=Val(AppId)\", Body: LangRes(confirm))\n            }\n        }\n    }\n}.ElseIf(GetVar(block)){\n    Div(breadcrumb){\n        LinkPage(Body:Dashboard,Page:#this_page#)\n        Span(/,mh)\n        Span(Class: text-muted, Body: Block: #block#)\n    }\n    Include(Name:#block#)\n}.Else{\n    DBFind(buffer_data).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n    If(#Single#==binaries){\n        Data(tables, \"Table,Page\"){\n            binaries,app_upload_binary\n        }\n    }.ElseIf(#Single#==languages){\n        Data(tables, \"Table,Cols,Page\"){\n            languages,\"id,app_id,name,res\",langres_add\n        }\n    }.Else{\n        Data(tables, \"Table,Cols,Page\"){\n            contracts,\"id,app_id,name,active\",editor\n            pages,\"id,app_id,name\",editor\n            blocks,\"id,app_id,name\",editor\n            tables,\"id,app_id,name\",table_create\n            app_params,\"id,app_id,name,value\",app_params_edit\n        }\n    }\n    SetVar(active_btn,\"btn btn-info\").(create_icon,fa fa-plus-square).(cols,3)\n    If(GetVar(appid)!=\"\"){\n        SetVar(where,\"app_id=#appid#\")\n    }.Else{\n        If(#buffer_value_app_id#>0){\n            SetVar(appid,#buffer_value_app_id#).(where,\"app_id=#appid#\")\n        }.Else{\n            SetVar(where,\"id>0\").(appid,1)\n        }\n    }\n    If(#appid#==0){\n        SetVar(application_name,trash)\n    }.ElseIf(#appid#>0){\n        DBFind(applications).WhereId(#appid#).Vars(application)\n    }\n    SetTitle(Dashboard: #application_name#)\n    Div(content-wrapper){\n        Div(panel panel-default){\n            If(GetVar(Single)){\n                Div(pull-right){\n                    Button(Page: #this_page#, PageParams: \"appid=#appid#\", Class: btn btn-default btn-close fa fa-close)\n                }\n            }.Else{\n                Div(row){\n                    Div(col-sm-12 btn-group){\n                        ForList(src_apps){\n                            If(#id#==1){\n                                If(#appid#==0){\n                                    LinkPage(Class: #active_btn# disabled, Body: Span(Class:fa fa-trash))\n                                }.Else{\n                                    LinkPage(Page: #this_page#, Class: btn btn-default, PageParams: \"appid=0\", Body: Span(Class:fa fa-trash))\n                                }\n                            }\n                            If(#appid#==#id#){\n                                LinkPage(Class: #active_btn# disabled, Body:\"#id#:#name#\")\n                            }.Else{\n                                LinkPage(Page: #this_page#, Class: btn btn-default, PageParams: \"appid=#id#\", Body:\"#id#:#name#\")\n                            }\n                        }\n                    }\n                }\n            }\n\n            Div(panel-body){\n                SetVar(limit,250)\n                ForList(tables){\n                    If(#Table#==binaries){\n                        DBFind(#Table#, src_table).Limit(#limit#).Order(\"id desc\").Where(#where#).Custom(_name){\n                            LinkPage(Page: #Page#, PageParams: \"id=#id#,application_id=#appid#\"){#name#}\n                        }.Custom(_img){\n                            Image(Src: Binary().ById(#id#), Class: preview)\n                        }\n                    }.Else{\n                        DBFind(#Table#, src_table).Limit(#limit#).Columns(#Cols#).Order(\"name\").Where(#where#)\n                    }\n                    Div(h3){\n                        If(#Table#==contracts){\n                            LinkPage(Page: #Page#, Class: text-normal, PageParams: \"create=contract,appId=#appid#\"){\n                                LangRes(#Table#)\n                            }\n                        }.ElseIf(#Table#==pages){\n                            LinkPage(Page: #Page#, Class: text-normal, PageParams: \"create=page,appId=#appid#\"){\n                                LangRes(#Table#)\n                            }\n                        }.ElseIf(#Table#==blocks){\n                            LinkPage(Page: #Page#, Class: text-normal, PageParams: \"create=block,appId=#appid#\"){\n                                LangRes(#Table#)\n                            }\n                        }.ElseIf(#Table#==tables){\n                            LinkPage(Page: #Page#, Class: text-normal, PageParams: \"application_id=#appid#\"){\n                                LangRes(#Table#)\n                            }\n                        }.ElseIf(#Table#==app_params){\n                            LinkPage(Page: #Page#, Class: text-normal, PageParams: \"application_id=#appid#,create=create\"){\n                                LangRes(#Table#)\n                            }\n                        }.ElseIf(#Table#==binaries){\n                            LinkPage(Page: #Page#, Class: text-normal, PageParams: \"application_id=#appid#\"){\n                                LangRes(#Table#)\n                            }\n                        }.ElseIf(#Table#==languages){\n                            LinkPage(Page: #Page#, Class: text-normal, PageParams: \"application_id=#appid#\"){\n                                LangRes(#Table#)\n                            }\n                        }\n                    }\n                    Div(row list-group-item pd){\n                        Div(col-sm-12){\n                            If(#Table#==binaries){\n                                Div(items){\n                                    Table(src_table,\"=id,Edit link=_name,Download link=data,=_img\")\n                                }\n                            }.Else{\n                                Div(cols){\n                                    SetVar(value,).(res,)\n                                    ForList(src_table){\n                                        Div(clearfix item){\n                                            Div(pull-right){\n                                                If(#Table#==contracts){\n                                                    If(#active#==1){\n                                                        Span(actived,text-success mr-lg)\n                                                    }\n                                                    LinkPage(Class: text-muted fa fa-cogs, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=contract\")\n                                                }\n                                                If(#Table#==pages){\n                                                    LinkPage(Class: text-muted fa fa-eye, Page: #name#)\n                                                    LinkPage(Class: text-muted fa fa-cogs, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=page\")\n                                                }\n                                                If(#Table#==blocks){\n                                                    LinkPage(Class: text-muted fa fa-eye, Page: #this_page#, PageParams:\"block=#name#\")\n                                                    LinkPage(Class: text-muted fa fa-cogs, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=block\")\n                                                }\n                                                If(#Table#==tables){\n                                                    LinkPage(Class: text-muted fa fa-eye, Page: table_view, PageParams: \"tabl_id=#id#,table_name=#name#\")\n                                                }\n                                                If(#changer_count#==1){\n                                                    If(#appid#==0){\n                                                        Button(Class: btn-link text-muted fa fa-recycle, Page: #this_page#, PageParams: \"Restore=1,Table=#Table#,Id=#id#\").Popup(30, \"Select restore target application\")\n                                                    }.Else{\n                                                        If(#ecosystem_id#==1){\n                                                            Button(Class: btn-link text-muted fa fa-trash, Page: #this_page#, PageParams: \"appid=#appid#\", Contract: ItemChangeAppId, Params: \"Table=#Table#,Id=#id#,AppId=0\").Alert(\"Do you want to remove this item from the application?\", \"confirm\", \"cancel\")\n                                                        }.Else{\n                                                            Button(Class: btn-link text-muted fa fa-trash, Page: #this_page#, PageParams: \"appid=#appid#\", Contract: @1ItemChangeAppId, Params: \"Table=#Table#,Id=#id#,AppId=0\").Alert(\"Do you want to remove this item from the application?\", \"confirm\", \"cancel\")\n\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                            If(#Table#==contracts){\n                                                LinkPage(Page: #Page#, PageParams: \"open=contract,name=#name#\"){#name#}\n                                            }\n                                            If(#Table#==pages){\n                                                LinkPage(Page: #Page#, PageParams: \"open=page,name=#name#\"){#name#}\n                                            }\n                                            If(#Table#==blocks){\n                                                LinkPage(Page: #Page#, PageParams: \"open=block,name=#name#\"){#name#}\n                                            }\n                                            If(#Table#==tables){\n                                                LinkPage(Page: table_edit, PageParams: \"tabl_id=#id#\"){#name#}\n                                            }\n                                            If(#Table#==app_params){\n                                                LinkPage(Page: #Page#, PageParams: \"id=#id#\"){#name#}\n                                            }\n                                            If(#Table#==languages){\n                                                LinkPage(Page: langres_edit, PageParams: \"lang_id=#id#\"){#name#}\n                                            }\n                                            If(`#value#`!=\"\"){\n                                                :Div(text-muted){`#value#`}.Style(max-height:1.5em;overflow:hidden;)\n                                            }.ElseIf(`#res#`!=\"\"){\n                                                :Div(text-muted){`#res#`}\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-sm-12 mt-lg text-right){\n                                If(#Table#==contracts){\n                                    LinkPage(Page: #Page#, PageParams: \"create=contract,appId=#appid#\"){\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n                                    }\n                                }.ElseIf(#Table#==pages){\n                                    LinkPage(Page: #Page#, PageParams: \"create=page,appId=#appid#\"){\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n                                    }\n                                }.ElseIf(#Table#==blocks){\n                                    LinkPage(Page: #Page#, PageParams: \"create=block,appId=#appid#\"){\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n                                    }\n                                }.ElseIf(#Table#==tables){\n                                    LinkPage(Page: #Page#, PageParams: \"application_id=#appid#\"){\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n                                    }\n                                }.ElseIf(#Table#==app_params){\n                                    LinkPage(Page: #Page#, PageParams: \"application_id=#appid#,create=create\"){\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n                                    }\n                                }.ElseIf(#Table#==binaries){\n                                    LinkPage(Page: #Page#, PageParams: \"application_id=#appid#\"){\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n                                    }\n                                }.ElseIf(#Table#==languages){\n                                    LinkPage(Page: #Page#, PageParams: \"application_id=#appid#\"){\n                                        Em(Class: #create_icon#) CREATE Em(Class: #create_icon#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer){\n                If(GetVar(Single)){\n                    Button(Page: #this_page#, PageParams: \"appid=#appid#\", Class: btn btn-default mr, Body: Back)\n                }.Else{\n                    Button(Page: #this_page#, PageParams: \"Single=binaries,appid=#appid#\", Class: btn btn-default mr, Body: binaries)\n                    Button(Page: #this_page#, PageParams: \"Single=languages,appid=#appid#\", Class: btn btn-default, Body: languages)\n                }\n            }\n        }\n    }.Style(\n        .pull-right a {\n            margin-right:10px;\n        }\n        .text-muted {\n            color: #909fa7!important;\n        }\n        .text-normal {\n            color:#818283!important;\n        }\n        .text-normal:hover {\n            text-decoration:none;\n            cursor:unset;\n        }\n        .cols {\n            -moz-column-count: #cols#;\n            -webkit-column-count: #cols#;\n            column-count: #cols#;\n        }\n        .item:hover {\n            background-color: #fafafa;\n        }\n        .items tr:hover {\n            background-color: #fafafa;\n        }\n        .preview {\n            height:30px;\n        }\n        .btn-close {\n            background-color: #00000000;\n            border-bottom-left-radius: 100%;\n        }\n    )\n}",
            "Name": "admin_dashboard",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Vars(\"application\")\n\n    Div(content-wrapper){\n        SetTitle(\"Binary data\": #application_name#)\n        AddToolButton(Title: \"Upload binary\", Page: app_upload_binary, Icon: icon-plus, PageParams: \"application_id=#application_id#\")\n\n        SetVar(pager_table, binaries).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_binary).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, app_binary)\n        Include(admin_link)\n\n        DBFind(binaries, src_binparameters).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_binparameters){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        If(#member_id# == #key_id#){\n                                            LinkPage(Class: text-primary h5, Body: #name#, Page: app_upload_binary, PageParams: \"id=#id#,application_id=#buffer_value_app_id#\")\n                                        }.Else{\n                                            Span(Class: h5, Body: #name#)\n                                        }\n                                    }\n                                    Div(col-md-8 text-right){\n                                        Span(#hash#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Binary data\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_binary",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n\tDBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Vars(\"application\")\n\n\tDiv(content-wrapper){\n\t\tSetTitle(\"Blocks\": #application_name#)\n\t\tAddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=block,appId=#buffer_value_app_id#\")\n\n\t\tSetVar(pager_table, blocks).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_blocks).(pager_limit, 50)\n\t\tInclude(pager_header)\n\n\t\tSetVar(admin_page, app_blocks)\n\t\tInclude(admin_link)\n\n\t\tDBFind(blocks, src_blocks).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n\t\tForm(panel panel-primary){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tForList(src_blocks){\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\n\t\t\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: \"#name#\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(col-md-8){\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: history, PageParams: \"id=#id#,type=block\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=block\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=block,name=#name#\"))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer clearfix){\n\t\t\t\tInclude(pager)\n\t\t\t}\n\t\t}\n\t}\n}.Else{\n\tSetTitle(\"Blocks\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n\t}\n}",
            "Name": "app_blocks",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n\tDBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Vars(\"application\")\n\n\tDiv(content-wrapper){\n\t\tSetTitle(\"Contracts\": #application_name#)\n\t\tAddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=contract,appId=#buffer_value_app_id#\")\n\n\t\tSetVar(pager_table, contracts).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_contracts).(pager_limit, 50)\n\t\tInclude(pager_header)\n\n\t\tSetVar(admin_page, app_contracts)\n\t\tInclude(admin_link)\n\n\t\tDBFind(contracts, src_contracts).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n\t\tForm(panel panel-primary){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tForList(src_contracts){\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\n\t\t\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: \"#name#\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(col-md-8){\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: history, PageParams: \"id=#id#,type=contract\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=contract\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=contract,name=#name#\"))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\n\t\t\t\t\t\t\t\t\t\t\tIf(#active#==1){\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5, Body: Em(Class: fa fa-check)).Style(margin-right: 50px;)\n\t\t\t\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-muted, Body: Em(Class: fa fa-minus)).Style(margin-right: 50px;)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer clearfix){\n\t\t\t\tInclude(pager)\n\t\t\t}\n\t\t}\n\t}\n}.Else{\n\tSetTitle(\"Contracts\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n\t}\n}",
            "Name": "app_contracts",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Applications\")\n    Div(breadcrumb){\n\t\tLinkPage(\"Applications\", apps_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tIf(#id# > 0){\n\t\t\tSpan(Class: text-muted, Body: \"Edit\")\n\t\t}.Else{\n\t\t\tSpan(Class: text-muted, Body: \"New\")\n\t\t}\n    }\n\t\n\tForm(){\n\t\tIf(#id# > 0){\n\t\t\tDBFind(applications, src_apps).Columns(\"id,name,conditions,deleted\").Where(\"id=#id#\").Vars(\"application\")\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Name\")\n\t\t\t\tInput(Name: Name, Disabled: \"true\", Value: #application_name#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #application_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(text-left col-md-6){\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: apps_list, Contract: @1EditApplication, Params: \"ApplicationId=#id#\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(text-right col-md-6){\n\t\t\t\t\t\tIf(#application_deleted# == 0){\n\t\t\t\t\t\t\tButton(Body: \"Delete\", Class: btn btn-danger, Page: apps_list, Contract: @1DelApplication, Params: \"ApplicationId=#application_id#,Value=1\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}.Else{\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Name\")\n\t\t\t\tInput(Name: Name)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tDiv(text-left){\n\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: apps_list, Contract: @1NewApplication)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n}",
            "Name": "app_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Vars(\"application\")\n\n    Div(content-wrapper){\n        SetTitle(\"Language resources\": #application_name#)\n        AddToolButton(Title: \"Create\", Page: langres_add, Icon: icon-plus, PageParams: \"application_id=#application_id#\")\n\n        SetVar(pager_table, languages).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_langres).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, app_langres)\n        Include(admin_link)\n\n        DBFind(languages, src_languages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            SetVar(cols,Calculate(12/#width#))\n            Div(panel-body){\n                Div(cols){\n                    ForList(src_languages){\n                        Div(list-group-item clearfix){\n                            Span(#id#,mr-sm text-bold).(#name#,mr-sm).(`#res#`,text-muted)\n                            LinkPage(Class:fa fa-edit pull-right, Page: langres_edit, PageParams: \"lang_id=#id#\")\n                        }\n                    }\n                }\n            }.Style(\n                .cols {\n                    -moz-column-count: #cols#;\n                    -webkit-column-count: #cols#;\n                    column-count: #cols#;\n                }\n            )\n\n            Div(panel-footer){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Language resources\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_langres",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n\tDBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Vars(\"application\")\n\n\tDiv(content-wrapper){\n\t\tSetTitle(\"Pages\": #application_name#)\n\t\tAddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=page,appId=#buffer_value_app_id#\")\n\n\t\tSetVar(pager_table, pages).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_pages).(pager_limit, 50)\n\t\tInclude(pager_header)\n\n\t\tSetVar(admin_page, app_pages)\n\t\tInclude(admin_link)\n\n\t\tDBFind(pages, src_pages).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n\t\tForm(panel panel-primary){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tForList(src_pages){\n\t\t\t\t\t\tDiv(col-md-#width# col-sm-12){\n\t\t\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\t\t\tDiv(col-md-4){\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n\t\t\t\t\t\t\t\t\t\tLinkPage(Page: #name#, Class: text-primary h5, Body: \"#name#\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tDiv(col-md-8){\n\t\t\t\t\t\t\t\t\t\tDiv(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-history), Class: text-primary h4, Page: history, PageParams: \"id=#id#,type=page\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=page\")).Style(margin-right: 15px;)\n\t\t\t\t\t\t\t\t\t\t\tSpan(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=page,name=#name#\"))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer clearfix){\n\t\t\t\tInclude(pager)\n\t\t\t}\n\t\t}\n\t}\n}.Else{\n\tSetTitle(\"Pages\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n\t}\n}",
            "Name": "app_pages",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Vars(\"application\")\n\n    Div(content-wrapper){\n        SetTitle(\"Application parameters\": #application_name#)\n        AddToolButton(Title: \"Create\", Page: app_params_edit, Icon: icon-plus, PageParams: \"application_id=#application_id#,create=create\")\n\n        SetVar(pager_table, app_params).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_params).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, app_params)\n        Include(admin_link)\n\n        DBFind(app_params, src_appparameters).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_appparameters){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        Span(Class: h5, Body: \"#name#\")\n                                    }\n                                    Div(col-md-8 text-right){\n                                        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: app_params_edit, PageParams: \"id=#id#\"))\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Application parameters\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_params",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#create# == create){\n        SetVar(param_name, \"New\")\n    }.Else{\n\t\tDBFind(app_params, src_params).Where(\"id=#id#\").Vars(\"param\")\n    }\n\t\n\tSetTitle(\"Application parameter\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Application parameters\", app_params)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: #param_name#)\n\t}\n\n    Form(){\n        Div(form-group){\n            Label(\"Name\")\n            If(#create# == create){\n                Input(Name: name)\n            }.Else{\n                Input(Name: name, Value: #param_name#, Disabled: \"true\")\n            }\n        }\n        Div(form-group){\n            If(#create# == create){\n                Input(Type: textarea, Name: value).Style(height: 500px !important;)\n            }.Else{\n                Input(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\n            }\n        }\n        Div(form-group){\n            Label(\"Change conditions\")\n            If(#create# == create){\n                Input(Name: conditions)\n            }.Else{\n                Input(Name: conditions, Value: #param_conditions#)\n            }\n        }\n        Div(form-group){\n            If(#create# == create){\n                Button(Class: btn btn-primary, Body: \"Save\", Contract: @1NewAppParam, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions),ApplicationId=#application_id#\", Page: app_params)\n            }.Else{\n                Button(Class: btn btn-primary, Body: \"Save\", Contract: @1EditAppParam, Params: \"Id=#id#,Value=Val(value),Conditions=Val(conditions)\", Page: app_params)\n            }\n        }\n    }\n}",
            "Name": "app_params_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(buffer_data, src_buffer).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\nIf(#buffer_value_app_id# > 0){\n    DBFind(applications, src_app).Where(\"id=#buffer_value_app_id#\").Vars(\"application\")\n\n    Div(content-wrapper){\n        SetTitle(\"Tables\": #application_name#)\n        AddToolButton(Title: \"Create\", Page: table_create, Icon: icon-plus, PageParams: \"application_id=#application_id#\")\n\n        SetVar(pager_table, tables).(pager_where, \"app_id=#buffer_value_app_id#\").(pager_page, app_tables).(pager_limit, 50)\n        Include(pager_header)\n\n        SetVar(admin_page, app_tables)\n        Include(admin_link)\n\n        DBFind(tables, src_tables).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\")\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    ForList(src_tables){\n                        Div(col-md-#width# col-sm-12){\n                            Div(list-group-item){\n                                Div(row){\n                                    Div(col-md-4){\n                                        Span(Class: h5 text-bold, Body: \"#id#\").Style(margin-right: 10px;)\n                                        LinkPage(Page: table_view, Class: text-primary h5, Body: \"#name#\", PageParams: \"tabl_id=#id#\")\n                                    }\n                                    Div(col-md-8){\n                                        Div(pull-right){\n                                            Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: table_edit, PageParams: \"tabl_id=#id#\"))\n                                        }\n                                        Div(pull-right){\n                                            DBFind(#name#).Columns(\"id\").Count(countvar)\n                                            Span(Class: h5 text-muted, Body: #countvar#).Style(margin-right: 50px;)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel-footer clearfix){\n                Include(pager)\n            }\n        }\n    }\n}.Else{\n    SetTitle(\"Tables\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"You did not select the application. Viewing resources is not available\")\n    }\n}",
            "Name": "app_tables",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Binary data\")\n    Div(breadcrumb){\n        LinkPage(\"Binary data\", app_binary)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tIf(#id# > 0){\n\t\t\tSpan(\"Edit\", text-muted)\n\t\t\tDBFind(binaries).Columns(name).Where(id = #id#).Vars(binary)\n\t\t}.Else{\n\t\t\tSpan(\"Upload\", text-muted)\n\t\t}\n    }\n\t\n\tForm(){\n\t\tDiv(form-group){\n\t\t\tDiv(text-left){\n\t\t\t\tLabel(\"Name\")\n\t\t\t}\n\t\t\tIf(#id# > 0){\n\t\t\t\tInput(Name: name, Disabled: disabled, Value: #binary_name#)\n\t\t\t}.Else{\n\t\t\t\tInput(Name: name)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tDiv(text-left){\n\t\t\t\tLabel(\"File\")\n\t\t\t}\n\t\t\tInput(Name: databin, Type: file)\n\t\t}\n\t\tDiv(form-group text-left){\n\t\t\tButton(Body: \"Upload\", Contract: @1UploadBinary, Class: btn btn-primary, Params: \"Name=Val(name),ApplicationId=#application_id#,Data=Val(databin),MemberID=#key_id#\", Page: app_binary)\n\t\t}\n    }\n}",
            "Name": "app_upload_binary",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    If(#deleted# == deleted){\n        SetTitle(\"Inactive applications\")\n        Div(breadcrumb){\n            LinkPage(\"Applications\", apps_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: \"Inactive applications\")\n        }\n        DBFind(applications, src_applications).Where(\"deleted=1\").Order(\"id\").Count(countvar).Custom(_actions){\n            Button(Class: btn btn-link, Page: apps_list, Contract: @1DelApplication, Params: \"ApplicationId=#id#\", Body: \"Restore\")\n        }\n        If(#countvar# > 0) {\n            Table(Source: src_applications, Columns: \"ID=id,Name=name,Conditions=conditions,=_actions\")\n        }.Else{\n            Div(content-wrapper){\n                Span(Class: text-muted, Body: \"You don't have any inactive applications\")\n            }\n        }\n    }.Else{\n        SetTitle(\"Applications\")\n        Div(breadcrumb){\n            Span(Class: text-muted, Body: \"This section is used to select installed applications\")\n        }\n        AddToolButton(Title: \"Inactive apps\", Page: apps_list, Icon: icon-close, PageParams:\"deleted=deleted\")\n        AddToolButton(Title: \"Create\", Page: app_edit, Icon: icon-plus)\n\n        DBFind(buffer_data, src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n        DBFind(applications, src_applications).Where(\"deleted=0\").Order(\"id\").Custom(_check){\n            If(#id#==#buffer_value_app_id#){\n                Span(Em(Class: fa fa-check)).Style(margin-left:30px;)\n            }.Else{\n                Button(Class: btn btn-link, Contract: @1SelectApp, Params: \"ApplicationId=#id#\", Page: apps_list, Body: \"select\")\n            }\n        }.Custom(custom_actions){\n            Button(Class: btn btn-link, Body: Em(Class: fa fa-edit), Page: app_edit, PageParams: \"id=#id#\")\n        }\n\n        Table(Source: src_applications, Columns: \"ID=id,Name=name,Conditions=conditions,Selected=_check,=custom_actions\")\n    }\n}.Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc;\n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr > *:first-child {\n        padding-left:20px;\n        width: 80px;\n    }\n    tr > *:last-child {\n        padding-right:15px;\n        text-align:right;\n        width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    }\n)",
            "Name": "apps_list",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Tables\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tLinkPage(\"Edit table\", table_edit, PageParams:\"tabl_id=#tabl_id#\")\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Add column\", text-muted)\n\t\t}\n\t}\n\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Column\")\n\t\t\t\tInput(Name: ColumnName)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tData(src_type,\"type,name\"){\n\t\t\t\t\ttext,\"Text\"\n\t\t\t\t\tnumber,\"Number\"\n\t\t\t\t\tvarchar,\"Varchar\"\n\t\t\t\t\tdatetime,\"Date/Time\"\n\t\t\t\t\tmoney,\"Money\"\n\t\t\t\t\tdouble,\"Double\"\n\t\t\t\t\tcharacter,\"Character\"\n\t\t\t\t\tjson,\"JSON\"\n\t\t\t\t}\n\t\t\t\tLabel(\"Type\")\n\t\t\t\tSelect(Name: Coltype, Source: src_type, NameColumn: name, ValueColumn: type, Value:\"text\")\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Update\")\n\t\t\t\tInput(Name: ColumnUp)\n\t\t\t}\n\t\t}\n\t\tDiv(panel-footer clearfix){\n\t\t\tButton(Body: \"Add column\", Contract: @1NewColumn, Class: btn btn-primary, Page: table_edit, PageParams: \"tabl_id=#tabl_id#\", Params: \"TableName=#next_table_name#,Name=Val(ColumnName),Type=Val(Coltype),Permissions=Val(ColumnUp)\")\n\t\t}\n\t}\n}",
            "Name": "column_add",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Edit column\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tLinkPage(\"Edit table\", table_edit, PageParams:\"tabl_id=#tabl_id#\")\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Edit column\", text-muted)\n\t\t}\n\t}\n\n\tDBFind(tables, src_mem).Columns(\"id,name,columns,conditions\").Vars(pre).WhereId(#tabl_id#)\n\tJsonToSource(src_columns, #pre_columns#)\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tForList(src_columns){\n\t\t\t\tIf(#key# == #name_column#){\n\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Column\")\n\t\t\t\t\t\tInput(Name: ColumnName, Disabled: \"true\", Value: #name_column#)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Type\")\n\t\t\t\t\t\tSetVar(col_type, GetColumnType(#pre_name#, #key#))\n\t\t\t\t\t\tIf(#col_type# == character){\n\t\t\t\t\t\t\tSetVar(input_type, \"Character\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == text){\n\t\t\t\t\t\t\tSetVar(input_type, \"Text\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == number){\n\t\t\t\t\t\t\tSetVar(input_type, \"Number\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == money){\n\t\t\t\t\t\t\tSetVar(input_type, \"Money\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == varchar){\n\t\t\t\t\t\t\tSetVar(input_type, \"Varchar\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == datetime){\n\t\t\t\t\t\t\tSetVar(input_type, \"Date/Time\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == double){\n\t\t\t\t\t\t\tSetVar(input_type, \"Double\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == json){\n\t\t\t\t\t\t\tSetVar(input_type, \"JSON\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == bytea){\n\t\t\t\t\t\t\tSetVar(input_type, \"Binary Data\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIf(#col_type# == uuid){\n\t\t\t\t\t\t\tSetVar(input_type, \"UUID\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tInput(Name: Coltype, Disabled: \"true\", Value: #input_type#)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\tLabel(\"Conditions\")\n\t\t\t\t\t\tInput(Name: ColumnUp, Value: #value#)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(panel-footer clearfix){\n\t\t\tButton(Body: \"Save\", Contract: @1EditColumn, Class: btn btn-primary, Page: table_edit, PageParams: \"tabl_id=#tabl_id#\", Params: \"TableName=#pre_name#,Name=Val(ColumnName),Type=Val(Coltype),Permissions=Val(ColumnUp)\")\n\t\t}\n\t}\n}\n",
            "Name": "column_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(Confirmations)\n    AddToolButton(Title: \"Create\", Page: confirmations_new, Icon: icon-plus)\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage contracts with confirmation\")\n\t}\n\n    DBFind(signatures, src_sign).Limit(250).Order(\"id\").Columns(\"id,name,value->params,value->title,conditions\").Custom(custom_title){\n        Span(#value.title#)\n    }.Custom(custom_params){\n        Span(#value.params#)\n    }.Custom(action){\n        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: confirmations_edit, PageParams: \"sign_id=#id#\"))\n    }\n\n    Table(Source:src_sign, Columns:\"Contract=name,Title=custom_title,Params=custom_params,Conditions=conditions,=action\").Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc; \n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr  > *:first-child {\n        padding-left:20px;\n    }\n    tr  > *:last-child {\n        padding-right:30px;\n        text-align:right; \n        width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    })\n}",
            "Name": "confirmations",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Confirmations\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Confirmations\", confirmations)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: \"Edit\")\n\t}\n\n\tForm(){\n\t\tDBFind(signatures, src_signatures).Columns(\"name,conditions,value->title,value->params\").Vars(pre).WhereId(#sign_id#)\n\t\tDiv(form-group){\n\t\t\tLabel(\"Contract name\")\n\t\t\tInput(Name: Name, Value: #pre_name#, Disabled: 1)\n\t\t}\t\t\n\t\tDiv(form-group){\n\t\t\tLabel(\"Title of confirmation\")\n\t\t\tInput(Name: Title, Value: #pre_value_title#)\n\t\t}\t\t\n\t\tDiv(form-group){\n\t\t\tLabel(\"Parameters\")\n\t\t\tInput(Name: Parameter, Value: #pre_value_params#)\n\t\t}\t\t\n\t\tDiv(form-group){\n\t\t\tLabel(\"Conditions\")\n\t\t\tInput(Name: Conditions, Value: #pre_conditions#)\n\t\t}\n\t\tDiv(form-group){\n\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1EditSignJoint, Page: confirmations, Params: \"Id=#sign_id#\")\n\t\t}\n\t}\n}",
            "Name": "confirmations_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Confirmations\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Confirmations\", confirmations)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: \"Create\")\n\t}\n\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n            Div(form-group){\n                Label(\"Contract name\")\n                Input(Name: Name, Placeholder: \"Name\")\n            }\t\t\n            Div(form-group){\n                Label(\"Title of confirmation\")\n                Input(Name: Title, Placeholder: \"Title\")\n            }\n            Div(form-group){\n                Label(\"Conditions\")\n                Input(Name: Conditions, Placeholder: \"Conditions\")\n            }\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-4){\n\t\t\t\t\tLabel(Class: text-bold, Body: \"Parameter\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-7){\n\t\t\t\t\tLabel(Class: text-bold, Body: \"Value\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-1){\n\t\t\t\t\tLabel(Class: text-bold, Body: \"Action\")\n\t\t\t\t}\n\t\t\t}\n\t\t\tIf(GetVar(cs)==\"\"){\n\t\t\t\tSetVar(cs, Calculate( Exp: 0, Type: int))\n\t\t\t}\n\t\t\tIf(#del# == 1){\n\t\t\t\tSetVar(cs, Calculate( Exp: #cs# - 1, Type: int))\n\t\t\t}.Else{\n\t\t\t\tSetVar(cs, Calculate( Exp: #cs# + 1, Type: int))\n\t\t\t}\n\t\t\tRange(params_range, 0, #cs#)\n\t\t\tForList(Source: params_range){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-4 mt-sm){\n\t\t\t\t\t\tInput(Name:ParamArr)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-7 mt-sm){\n\t\t\t\t\t\tInput(Name:ValueArr)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\tIf(And(#cs#==#params_range_index#,#cs#>1)){\n\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"cs=#cs#,del=1,application_id=#application_id#\", Page: confirmations_new)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mt-lg){\n\t\t\t\t\tLinkPage(Body: \"Add parameter\", Page: confirmations_new, PageParams:\"cs=#cs#,application_id=#application_id#\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tDiv(panel-footer){\n\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1NewSignJoint, Page: confirmations)\n\t\t}\n    }\t\n}",
            "Name": "confirmations_new",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Export\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Payload was formed. You can download it now\")\n    }\n\n    DBFind(binaries, src_binaries).Where(\"name='export' and member_id=#key_id# and app_id=1\").Custom(app_name){\n        DBFind(Name: buffer_data, Source: src_buffer).Columns(\"value->app_name\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n        Span(#buffer_value_app_name#)\n    }\n\n    Table(Source: src_binaries, \"Applications=app_name,=data\").Style(\n        tbody > tr:nth-of-type(odd) {\n            background-color: #fafbfc;\n        }\n        tbody > tr > td {\n            word-break: break-all;\n            font-weight: 400;\n            font-size: 13px;\n            color: #666;\n            border-top: 1px solid #eee;\n            vertical-align: middle;\n        }\n        tr > *:first-child {\n            padding-left:20px;\n            width: 100px;\n        }\n        tr > *:last-child {\n            padding-right:20px;\n            text-align:right;\n        }\n        thead {\n            background-color: #eee;\n        }\n    )\n}",
            "Name": "export_download",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetVar(pager_limit, 25).(pager_page, export_resources)\n    If(GetVar(res_type)){\n\t\tSetVar(page_params,`{\"res_type\":\"#res_type#\"}`)\n\t}.Else{\n\t\tSetVar(res_type,)\n        JsonToSource(src_params, #page_params#)\n        ForList(src_params){\n\t\t\tIf(#key#==res_type){\n\t\t\t\tSetVar(res_type,#value#)\n\t\t\t}\n\t\t}\n    }\n    SetTitle(\"Export\")\n    Div(breadcrumb text-muted){\n        Select the application which do you want to export and proceed to the payload generation process\n    }\n\n    Include(export_link)\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_id,value->app_name,value->menu_name,value->menu_id,value->count_menu\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n\n    If(#buffer_value_app_id# > 0){\n        If(#res_type#==\"pages\"){\n            SetVar(pager_table, pages).(pager_where, \"app_id=#buffer_value_app_id#\")\n            Include(pager_header)\n            DBFind(pages, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\").Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"blocks\"){\n            SetVar(pager_table, blocks).(pager_where, \"app_id=#buffer_value_app_id#\")\n            Include(pager_header)\n            DBFind(blocks, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\").Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"menu\"){\n            SetVar(pager_table, menu).(pager_where, \"id in (#buffer_value_menu_id#)\")\n            Include(pager_header)\n            DBFind(menu, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"id in (#buffer_value_menu_id#)\").Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"parameters\"){\n            SetVar(pager_table, app_params).(pager_where, \"app_id=#buffer_value_app_id#\")\n            Include(pager_header)\n            DBFind(app_params, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\").Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"languages\"){\n            SetVar(pager_table, languages).(pager_where, \"app_id=#buffer_value_app_id#\")\n            Include(pager_header)\n            DBFind(languages, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\").Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"contracts\"){\n            SetVar(pager_table, contracts).(pager_where, \"app_id=#buffer_value_app_id#\")\n            Include(pager_header)\n            DBFind(contracts, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\").Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n        If(#res_type#==\"tables\"){\n            SetVar(pager_table, tables).(pager_where, \"app_id=#buffer_value_app_id#\")\n            Include(pager_header)\n            DBFind(tables, src_pages).Count(pages_count).Limit(#pager_limit#).Order(#sort_name#).Offset(#pager_offset#).Where(\"app_id=#buffer_value_app_id#\").Custom(_cbox){\n                Input(Name: cbox, Type: checkbox, Value: true, Disabled: 1)\n            }.Order(\"id\")\n        }\n    }\n\n    Div(row){\n        Div(col-md-9){\n            Table(src_pages, \"ID=id,Name=name,=_cbox\")\n            If(#pages_count#>#pager_limit#){\n                Include(pager)\n            }\n        }\n        Div(col-md-3){\n            Include(export_info)\n        }\n    }\n\n}.Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc;\n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n        padding: 8px 20px !important;\n    }\n    tr > *:first-child {\n        padding-left:20px;\n        width: 80px;\n    }\n    tr > *:last-child {\n        padding-right:15px;\n        width: 50px;\n        text-align:right;\n    }\n    thead {\n        background-color: #eee;\n    }\n)",
            "Name": "export_resources",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Export: Application select\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"This section is used to select applications for export\")\n    }\n    SetVar(pager_limit, 25).(pager_page, export_resources)\n    SetVar(pager_table, applications).(pager_where, \"deleted=0\")\n    Include(pager_header)\n    DBFind(applications, src_apps).Count(pages_count).Where(\"deleted=0\").Limit(#pager_limit#).Offset(#pager_offset#).Order(\"id\").Custom(_select){\n        Div(text-right){\n            Button(Class: btn btn-link, Contract: @1ExportNewApp, Params: \"ApplicationId=#id#\", Page: export_resources, PageParams: \"res_type=selected\", Body: LangRes(select))\n        }\n    }\n    Table(src_apps,\"ID=id,Name=name,=_select\")\n    If(#pages_count#>#pager_limit#){\n        Include(pager)\n    }\n}.Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc;\n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr > *:first-child {\n        padding-left:20px;\n        width: 80px;\n    }\n    tr > *:last-child {\n        padding-right:15px;\n        text-align:center;\n        min-width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    }\n)",
            "Name": "export_select",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\n    If(GetVar(type) == page){\n        DBFind(pages, src_res).Where(\"id = #id#\").Limit(1).Vars(\"res\")\n        SetTitle(\"Page history\": #res_name#)\n    }\n    If(GetVar(type) == block){\n        DBFind(blocks, src_res).Where(\"id = #id#\").Limit(1).Vars(\"res\")\n        SetTitle(\"Block history\": #res_name#)\n    }\n    If(GetVar(type) == contract){\n        DBFind(contracts, src_res).Where(\"id = #id#\").Limit(1).Vars(\"res\")\n        SetTitle(\"Contract history\": #res_name#)\n    }\n    If(GetVar(type) == menu){\n        DBFind(menu, src_res).Where(\"id = #id#\").Limit(1).Vars(\"res\")\n        SetTitle(\"Menu history\": #res_name#)\n    }\n    \n\n    \n    SetVar(admin_page, page_history)\n\tIf(#sort#==1){\n\t    SetVar(sort_name, \"id asc\")\n    }.ElseIf(#sort#==2){\n        SetVar(sort_name, \"id desc\")\n    }.ElseIf(#sort#==3){\n        SetVar(sort_name, \"name asc\")\n    }.ElseIf(#sort#==4){\n        SetVar(sort_name, \"name desc\")\n    }.Else{\n        SetVar(sort, \"1\")\n        SetVar(sort_name, \"id asc\") \n    }\n\n    If(GetVar(type) == page){\n        GetPageHistory(Source: src_history, Id: #id#)\n    }\n    If(GetVar(type) == block){\n        GetBlockHistory(Source: src_history, Id: #id#)\n    }\n    If(GetVar(type) == contract){\n        GetContractHistory(Source: src_history, Id: #id#)\n    }\n    If(GetVar(type) == menu){\n        GetMenuHistory(Source: src_history, Id: #id#)\n    }\n    \n\n    If(Or(#width#==12,#width#==6,#width#==4)){\n    }.Else{\n        SetVar(width, \"12\")\n    }\n\n    Form(){\n        Div(clearfix){\n            Div(pull-right){\n                If(#width#==12){\n                    Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=12,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-bars), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=12,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }\n                If(#width#==6){\n                    Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=6,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-th-large), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=6,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }\n                If(#width#==4){\n                    Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray-lighter, Page: #admin_page#, PageParams: \"width=4,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-th), Class: btn bg-gray, Page: #admin_page#, PageParams: \"width=4,id=#id#,type=#type#\")).Style(margin-right:5px;)\n                }\n            }\n        }\n    }\n\n    \n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                ForList(Source: src_history){\n                    Div(col-md-#width# col-sm-12){\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-1){\n                                    Span(Class: h5, Body: \"#src_history_index#\")\n                                }\n                                Div(col-md-3){\n                                    Span(Class: h5, Body: \"#name#\")\n                                }\n                                Div(col-md-4){\n                                    Span(Class: h5, Body: \"#conditions#\")\n                                }\n                                Div(col-md-4){\n                                    Div(pull-right){\n                                        Button(Body: Em(Class: fa fa-recycle), Class: btn btn-primary, Page: history, PageParams: \"width=#width#,id=#id#,type=#type#\", Contract: Restore, Params: \"Id=#id#,IdHistory=#src_history_index#,Type=#type#\")\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Name": "history",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(buffer_data, src_buffer).Columns(\"id,value->name,value->data\").Where(\"key='import' and member_id=#key_id#\").Vars(hash00001)\n    DBFind(buffer_data, src_buffer).Columns(\"value->app_name,value->pages,value->pages_count,value->blocks,value->blocks_count,value->menu,value->menu_count,value->parameters,value->parameters_count,value->languages,value->languages_count,value->contracts,value->contracts_count,value->tables,value->tables_count\").Where(\"key='import_info' and member_id=#key_id#\").Vars(hash00002)\n\n    SetTitle(\"Import - #hash00002_value_app_name#\")\n    Data(data_info, \"hash00003_name,hash00003_count,hash00003_info\"){\n        Pages,\"#hash00002_value_pages_count#\",\"#hash00002_value_pages#\"\n        Blocks,\"#hash00002_value_blocks_count#\",\"#hash00002_value_blocks#\"\n        Menu,\"#hash00002_value_menu_count#\",\"#hash00002_value_menu#\"\n        Parameters,\"#hash00002_value_parameters_count#\",\"#hash00002_value_parameters#\"\n        Language resources,\"#hash00002_value_languages_count#\",\"#hash00002_value_languages#\"\n        Contracts,\"#hash00002_value_contracts_count#\",\"#hash00002_value_contracts#\"\n        Tables,\"#hash00002_value_tables_count#\",\"#hash00002_value_tables#\"\n    }\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Your data that you can import\")\n    }\n\n    Div(panel panel-primary){\n        ForList(data_info){\n            Div(list-group-item){\n                Div(row){\n                    Div(col-md-10 mc-sm text-left){\n                        Span(Class: text-bold, Body: \"#hash00003_name#\")\n                    }\n                    Div(col-md-2 mc-sm text-right){\n                        If(#hash00003_count# > 0){\n                            Span(Class: text-bold, Body: \"(#hash00003_count#)\")\n                        }.Else{\n                            Span(Class: text-muted, Body: \"(0)\")\n                        }\n                    }\n                }\n                Div(row){\n                    Div(col-md-12 mc-sm text-left){\n                        If(#hash00003_count# > 0){\n                            Span(Class: h6, Body: \"#hash00003_info#\")\n                        }.Else{\n                            Span(Class: text-muted h6, Body: \"Nothing selected\")\n                        }\n                    }\n                }\n            }\n        }\n        If(#hash00001_id# > 0){\n            Div(list-group-item text-right){\n                Button(Body: \"Import\", Class: btn btn-primary, Page: apps_list).CompositeContract(@1Import, \"#hash00001_value_data#\")\n            }\n        }\n    }\n}",
            "Name": "import_app",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle(\"Import\")\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"Select payload that you want to import\")\n    }\n    Form(panel panel-primary){\n        Div(list-group-item){\n            Input(Name: input_file, Type: file)\n        }\n        Div(list-group-item text-right){\n            Button(Body: \"Load\", Class: btn btn-primary, Contract: @1ImportUpload, Page: import_app)\n        }\n    }\n}",
            "Name": "import_upload",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(GetVar(application_id)){}.Else{\n    DBFind(buffer_data).Columns(\"value->app_id\").Where(\"key='export' and member_id=#key_id#\").Vars(buffer)\n    If(#buffer_value_app_id#>0){\n        SetVar(application_id,#buffer_value_app_id#)\n    }.Else{\n        SetVar(application_id,1)\n    }\n}\nIf(GetVar(name)){}.Else{\n    SetVar(name,)\n}\nDiv(content-wrapper){\n    SetTitle(\"Language resources\")\n    Div(Class: breadcrumb){\n        LinkPage(\"Language resources\", app_langres)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: \"Create\")\n    }\n\n    Form(panel panel-default){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Label(\"Name\")\n                    Input(Name:Name, Value:#name#)\n                }\n            }\n            Div(row text-muted){\n                Div(col-md-1 mt-lg){\n                    Label(){Locale}\n                }\n                Div(col-md-10 mt-lg){\n                    Label(){Value}\n                }\n                Div(col-md-1 mt-lg){\n                    Label(){Action}\n                }\n            }\n            If(GetVar(cs)==\"\"){\n                SetVar(cs,0)\n            }\n            If(#del# == 1){\n                SetVar(cs,Calculate(#cs# - 1))\n            }.Else{\n                SetVar(cs,Calculate(#cs# + 1))\n            }\n            Range(params_range, 0, #cs#)\n            ForList(Source: params_range){\n                Div(row mt-sm){\n                    Div(col-md-1){\n                        Input(Name:LocaleArr)\n                    }.Style(input {padding: 6px;text-align:center;})\n                    Div(col-md-10){\n                        Input(Name:ValueArr)\n                    }\n                    Div(col-md-1){\n                        If(And(#cs#==#params_range_index#,#cs#>1)){\n                            Button(Class:fa fa-trash btn btn-default, PageParams: \"cs=#cs#,del=1,application_id=#application_id#\", Page: langres_add)\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12 mt-lg){\n                    LinkPage(Body: \"Add localization\", Page: langres_add, PageParams:\"cs=#cs#,application_id=#application_id#\")\n                }\n            }\n        }\n        Div(panel-footer){\n            Button(Body: \"Save\", Class: btn btn-primary, Contract: @1NewLangJoint, Page: app_langres, Params: \"ApplicationId=#application_id#\")\n        }\n    }\n}",
            "Name": "langres_add",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Language resources\")\n\tDiv(Class: breadcrumb){\n\t\tLinkPage(\"Language resources\", app_langres)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: \"Edit\")\n\t}\n\t\n\tForm(panel panel-default){\n\t\tDiv(panel-body){\n\t\t\tDBFind(languages, src_leng).Vars(pre).WhereId(#lang_id#)\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12){\n\t\t\t\t\tLabel(\"Name\")\n\t\t\t\t\tInput(Name: LangName, Disabled: \"true\", Value: #pre_name#)\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Locale\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-10 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Value\")\n\t\t\t\t}\n\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\tLabel(Class: text-muted, Body: \"Action\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tJsonToSource(pv, #pre_res#)\n\t\t\tForList(Source: pv, Index:s_ind){\n\t\t\t\tSetVar(max_sec, #s_ind#)\n\t\t\t}\n\t\t\tIf(GetVar(cs)==\"\"){\n\t\t\t\tSetVar(cs, #max_sec#)\n\t\t\t}\n\t\t\tIf(Or(#del_flag#==1,#del_data#>0)){\n\t\t\t\tSetVar(cs, Calculate(Exp:#cs#-1, Type: int))\n\t\t\t}\n\t\t\t\n\t\t\tSetVar(next_sec, Calculate(Exp:#cs#+1, Type: int))\n\t\t\tSetVar(data_sec, Calculate(Exp:#cs#-#max_sec#, Type: int))\n\n\t\t\tForList(Source: pv, Index:s_ind){\n\t\t\t\tIf(#s_ind#>#cs#){\n\t\t\t\t}.Else{\n\t\t\t\t\tDiv(row){\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\t\tInput(Name: LocaleArr, Value: `#key#`)\n\t\t\t\t\t\t}.Style(input {padding: 6px;text-align:center;})\n\t\t\t\t\t\tDiv(col-md-10 mt-sm){\n\t\t\t\t\t\t\tInput(Name: ValueArr, Value: `#value#`)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\t\tIf(And(#s_ind#>1,#s_ind#==#cs#)){\n\t\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"lang_id=#lang_id#,cs=#cs#,del_data=#s_ind#\", Page: langres_edit)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tRange(params_range, #max_sec#, #cs#)\n\t\t\tForList(Source: params_range, Index:s_ind){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\tInput(Name:LocaleArr)\n\t\t\t\t\t}.Style(input {padding: 6px;text-align:center;})\n\t\t\t\t\tDiv(col-md-10 mt-sm){\n\t\t\t\t\t\tInput(Name:ValueArr)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\tIf(#s_ind#==#data_sec#){\n\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"lang_id=#lang_id#,cs=#cs#,del_flag=1\", Page: langres_edit)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(row){\n\t\t\t\tDiv(col-md-12 mt-lg){\n\t\t\t        LinkPage(Body: \"Add localization\", Page: langres_edit, PageParams: \"lang_id=#lang_id#,cs=#next_sec#\")\n                }\n            }\n\t\t}\n\t\tDiv(panel-footer){\n\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1EditLangJoint, Params: \"Id=#lang_id#\", Page: app_langres)\n\t\t}\n\t}\n}",
            "Name": "langres_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Menu\")\n    AddToolButton(Title: \"Create\", Page: editor, Icon: icon-plus, PageParams: \"create=menu,appId=0\")\n\tDiv(breadcrumb){\n\t\tSpan(Class: text-muted, Body: \"This section is used to manage the menu\")\n\t}\n\n    DBFind(menu, src_menus).Limit(250).Order(\"id\").Custom(action){\n        Span(LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: properties_edit, PageParams: \"edit_property_id=#id#,type=menu\")).Style(margin-right: 20px;)\n        Span(LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: editor, PageParams: \"open=menu,name=#name#\"))\n    }\n\n    Table(src_menus, \"ID=id,Name=name,Title=title,Conditions=conditions,=action\").Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #fafbfc; \n    }\n    tbody > tr > td {\n        word-break: break-all;\n        font-weight: 400;\n        font-size: 13px;\n        color: #666;\n        border-top: 1px solid #eee;\n        vertical-align: middle;\n    }\n    tr  > *:first-child {\n        padding-left:20px;\n        width: 80px;\n    }\n    tr  > *:last-child {\n        padding-right:30px;\n        text-align:right; \n        width: 100px;\n    }\n    thead {\n        background-color: #eee;\n    })\n}",
            "Name": "menus_list",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tIf(#stylesheet# == stylesheet){\n\t\tDBFind(parameters, src_params).Where(name='#stylesheet#').Vars(\"param\")\n\t}.Else{\n\t\tIf(#id#>0){\n\t\t\tDBFind(parameters, src_params).WhereId(#id#).Vars(\"param\")\n\t\t}.Else{\n\t\t\tSetVar(param_name, \"New\")\n\t\t}\n\t}\n\n\tSetTitle(\"Ecosystem parameters\")\n    Div(Class: breadcrumb){\n        LinkPage(\"Ecosystem parameters\", params_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #param_name#)\n    }\n\t\n\tForm(){\n\t\tDiv(form-group){\n\t\t\tLabel(\"Name\")\n\t\t\tIf(#param_id#>0){\n\t\t\t\tInput(Name: name, Value: #param_name#, Disabled: \"true\")\n\t\t\t}.Else{\n\t\t\t\tInput(Name: name)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tIf(#param_id#>0){\n\t\t\t\tInput(Type: textarea, Name: value, Value: \"#param_value#\").Style(height: 500px !important;)\n\t\t\t}.Else{\n\t\t\t\tInput(Type: textarea, Name: value).Style(height: 500px !important;)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tLabel(\"Change conditions\")\n\t\t\tIf(#param_id#>0){\n\t\t\t\tInput(Name: conditions, Value: #param_conditions#)\n\t\t\t}.Else{\n\t\t\t\tInput(Name: conditions)\n\t\t\t}\n\t\t}\n\t\tDiv(form-group){\n\t\t\tIf(#param_id#>0){\n\t\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1EditParameter, Params: \"Id=#param_id#,Value=Val(value),Conditions=Val(conditions)\", Page: params_list)\n\t\t\t}.Else{\n\t\t\t\tButton(Class: btn btn-primary, Body: \"Save\", Contract: @1NewParameter, Params: \"Name=Val(name),Value=Val(value),Conditions=Val(conditions)\", Page: params_list)\n\t\t\t}\n\t\t}\n\t}\n}",
            "Name": "params_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(fullscreen){\n    SetTitle(\"Ecosystem parameters\")\n    AddToolButton(Title: \"Manage stylesheet\", Page: params_edit, Icon: icon-picture, PageParams:\"stylesheet=stylesheet\")\n    AddToolButton(Title: \"Create\", Page: params_edit, Icon: icon-plus)\n    Div(breadcrumb){\n        Span(Class: text-muted, Body: \"This section is used to configure stored reusable parameters\")\n    }\n\n    DBFind(parameters, src_appparameters).Order(\"id\").Custom(custom_actions){\n        LinkPage(Body: Em(Class: fa fa-edit), Class: text-primary h4, Page: params_edit, PageParams: \"id=#id#\")\n    }\n\n    Table(src_appparameters, \"ID=id,Name=name,Value=value,Conditions=conditions,=custom_actions\").Style(\n        tbody > tr:nth-of-type(odd) {\n            background-color: #fafbfc;\n        }\n        tbody > tr > td {\n            word-break: break-all;\n            font-weight: 400;\n            font-size: 13px;\n            color: #666;\n            border-top: 1px solid #eee;\n            vertical-align: middle;\n        }\n        tr > *:first-child {\n            padding-left:20px;\n            width: 80px;\n        }\n        tr > *:last-child {\n            padding-right:30px;\n            text-align:right;\n            width: 100px;\n        }\n        thead {\n            background-color: #eee;\n        }\n    )\n}",
            "Name": "params_list",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(Class: content-wrapper){\n\tSetTitle(\"Edit properties\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tIf(#type# == page){\n\t\t\t\tLinkPage(\"Pages\", app_pages)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit page\", text-muted)\n\t\t\t\tDBFind(Name: pages, Source: src_page).WhereId(#edit_property_id#).Vars(item)\n\t\t\t\tDBFind(menu, src_menus)\n\t\t\t}\n\t\t\tIf(#type# == contract){\n\t\t\t\tLinkPage(\"Contracts\", app_contracts)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit contract\", text-muted)\n\t\t\t\tDBFind(Name: contracts, Source: src_contract).WhereId(#edit_property_id#).Vars(item)\n\t\t\t}\n            If(#type# == block){\n\t\t\t\tLinkPage(\"Blocks\", app_blocks)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit block\", text-muted)\n\t\t\t\tDBFind(Name: blocks, Source: src_block).WhereId(#edit_property_id#).Vars(item)\n\t\t\t}\n\t\t\tIf(#type# == menu){\n\t\t\t\tLinkPage(\"Menu\", menus_list)\n\t\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\t\tSpan(\"Edit menu\", text-muted)\n\t\t\t\tDBFind(Name: menu, Source: src_menu).WhereId(#edit_property_id#).Vars(item)\n\t\t\t}\n\t\t}\n\t}\n    Form(){\n\t\tDiv(form-group){\n\t\t\tLabel(\"Name\")\n\t\t\tInput(Name: Name, Value: #item_name#, Disabled: \"true\")\n\t\t}\n\t\tIf(#type# == page){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Menu\")\n\t\t\t\tSelect(Name: Menu, Source: src_menus, NameColumn: name, ValueColumn: name, Value: #item_menu#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: app_pages, Contract: @1EditPage, Params: \"Menu=Val(Menu),Conditions=Val(Conditions),Id=#edit_property_id#\")\n\t\t\t}\n\t\t}\n\t\tIf(#type# == contract){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Wallet\")\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-10){\n\t\t\t\t\t\tSetVar(address_item_wallet_id, Address(#item_wallet_id#))\n\t\t\t\t\t\tInput(Name: Wallet,Value: #address_item_wallet_id#)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-2){\n\t\t\t\t\t\tIf(#item_active# == 0){\n\t\t\t\t\t\t\tButton(Body: \"Bind\", Class: btn btn-primary btn-block, Contract: @1ActivateContract, Params: \"Id=#edit_property_id#\", Page:app_contracts)\n\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\tButton(Body: \"Unbind\", Class: btn btn-primary btn-block, Contract: @1DeactivateContract, Params: \"Id=#edit_property_id#\", Page:properties_edit, PageParams: \"edit_property_id=#edit_property_id#,type=#type#\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: app_contracts, Contract: @1EditContract, Params: \"Conditions=Val(Conditions),WalletId=Val(Wallet),Id=#edit_property_id#\")\n\t\t\t}\n\t\t}\n\t\tIf(#type# == block){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: app_blocks, Contract: @1EditBlock, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#\")\n\t\t\t}\n\t\t}\n\t\tIf(#type# == menu){\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Menu title\")\n\t\t\t\tInput(Name: Title, Value: #item_title#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tLabel(\"Change conditions\")\n\t\t\t\tInput(Name: Conditions, Value: #item_conditions#)\n\t\t\t}\n\t\t\tDiv(form-group){\n\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Page: menus_list, Contract: @1EditMenu, Params: \"Conditions=Val(Conditions),Id=#edit_property_id#,NameTitle=Val(Title)\")\n\t\t\t}\n\t\t}\n    }\n}",
            "Name": "properties_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tSetTitle(\"Create table\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Create\", text-muted)\n\t\t}\n\t}\n\n\tData(src_type,\"type,name\"){\n\t\ttext,\"Text\"\n\t\tnumber,\"Number\"\n\t\tvarchar,\"Varchar\"\n\t\tdatetime,\"Date/Time\"\n\t\tmoney,\"Money\"\n\t\tdouble,\"Double\"\n\t\tcharacter,\"Character\"\n\t\tjson,\"JSON\"\n\t}\n\tForm(){\n\t\tDiv(panel panel-default){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-12){\n\t\t\t\t\t\tLabel(\"Name\")\n\t\t\t\t\t\tInput(Name:Name)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-4 mt-lg){\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Columns\")\n\t\t\t\t\t\tInput(Name:disinp, Disabled: true, Value: id)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-7 mt-lg){\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Type\")\n\t\t\t\t\t\tInput(Name: disinp, Disabled: true, Value: Number)\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-1 mt-lg){\n\t\t\t\t\t\tLabel(Class: text-muted, Body: \"Action\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tIf(GetVar(cs)==\"\"){\n\t\t\t\t\tSetVar(cs, Calculate( Exp: 0, Type: int))\n\t\t\t\t}\n\t\t\t\tIf(#del# == 1){\n\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# - 1, Type: int))\n\t\t\t\t}.Else{\n\t\t\t\t\tSetVar(cs, Calculate( Exp: #cs# + 1, Type: int))\n\t\t\t\t}\n\t\t\t\tRange(params_range, 0, #cs#)\n\t\t\t\tForList(Source: params_range){\n\t\t\t\t\tDiv(row){\n\t\t\t\t\t\tDiv(col-md-4 mt-sm){\n\t\t\t\t\t\t\tInput(Name:ColumnsArr)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-7 mt-sm){\n\t\t\t\t\t\t\tSelect(Name: TypesArr, Source: src_type, NameColumn: name, ValueColumn: type)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(col-md-1 mt-sm){\n\t\t\t\t\t\t\tIf(And(#cs#==#params_range_index#, #cs# > 1)){\n\t\t\t\t\t\t\t\tButton(Body: Em(Class: fa fa-trash), Class: btn btn-default, PageParams: \"cs=#cs#,del=1,application_id=#application_id#\", Page: table_create)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t\tDiv(panel-footer){\n\t\t\t\tButton(Body: \"Add column\", Class: btn btn-primary, Page: table_create, PageParams: \"cs=#cs#,application_id=#application_id#\")\n\t\t\t}\n\t\t}\n\t\tDiv(row){\n\t\t\tDiv(col-md-6){\n\t\t\t\tDiv(panel panel-default){\n\t\t\t\t\tDiv(panel-heading, Body: \"Write permissions\")\n\t\t\t\t\tDiv(panel-body){\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(Insert)\n\t\t\t\t\t\t\tInput(Name: InsertPerm, Value: ContractConditions(\"MainCondition\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(Update)\n\t\t\t\t\t\t\tInput(Name: UpdatePerm, Value: ContractConditions(\"MainCondition\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(New column)\n\t\t\t\t\t\t\tInput(Name: NewColumnPerm, Value: ContractConditions(\"MainCondition\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tDiv(panel-footer){\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1NewTableJoint, Page: app_tables, Params: \"ApplicationId=#application_id#\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
            "Name": "table_create",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tDBFind(tables, src_mem).Columns(\"id,name,columns,conditions,permissions->insert,permissions->update,permissions->new_column\").Vars(pre).WhereId(#tabl_id#)\n\t\n\tSetTitle(\"Tables\")\n\tDiv(breadcrumb){\n\t\tDiv(){\n\t\t\tLinkPage(\"Tables\", app_tables)\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tLinkPage(#pre_name#, table_view,, \"tabl_id=#tabl_id#\")\n\t\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\t\tSpan(\"Edit\", text-muted)\n\t\t}\n\t}\n\n\tForm(){\n\t\tDiv(panel panel-default){\n\t\t\tDiv(panel-body){\n\t\t\t\tDiv(row){\n\t\t\t\t\tDiv(col-md-3 h4){\n\t\t\t\t\t\tLabel(\"Name\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-2 h4){\n\t\t\t\t\t\tLabel(\"Type\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-5 h4){\n\t\t\t\t\t\tLabel(\"Conditions\")\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-2 h4 text-right){\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tJsonToSource(src_columns, #pre_columns#)\n\t\t\t\tForList(src_columns){\n\t\t\t\t\tDiv(list-group-item){\n\t\t\t\t\t\tDiv(row){\n\t\t\t\t\t\t\tDiv(col-md-3 h5){\n\t\t\t\t\t\t\t\tSpan(#key#)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-2 h5){\n\t\t\t\t\t\t\t\tSetVar(col_type,GetColumnType(#pre_name#, #key#))\n\t\t\t\t\t\t\t\tIf(#col_type# == text){\n\t\t\t\t\t\t\t\t\tSpan(\"Text\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == number){\n\t\t\t\t\t\t\t\t\tSpan(\"Number\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == money){\n\t\t\t\t\t\t\t\t\tSpan(\"Money\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == varchar){\n\t\t\t\t\t\t\t\t\tSpan(\"Varchar\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == datetime){\n\t\t\t\t\t\t\t\t\tSpan(\"Date/Time\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == double){\n\t\t\t\t\t\t\t\t\tSpan(\"Double\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == character){\n\t\t\t\t\t\t\t\t\tSpan(\"Character\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == json){\n\t\t\t\t\t\t\t\t\tSpan(\"JSON\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == bytea){\n\t\t\t\t\t\t\t\t\tSpan(\"Binary Data\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tIf(#col_type# == uuid){\n\t\t\t\t\t\t\t\t\tSpan(\"UUID\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-5 h5){\n\t\t\t\t\t\t\t\tSpan(#value#)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tDiv(col-md-2 text-right){\n\t\t\t\t\t\t\t\tButton(Body: \"Edit\", Class: btn btn-primary, Page: column_edit, PageParams: \"name_column=#key#,tabl_id=#tabl_id#\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer){\n\t\t\t\tButton(Body: \"Add Column\", Class: btn btn-primary, Page: column_add, PageParams: \"next_table_name=#pre_name#,tabl_id=#tabl_id#\")\n\t\t\t}\n\t\t}\n\t\tDiv(row){\n\t\t\tDiv(col-md-6){\n\t\t\t\tDiv(panel panel-default){\n\t\t\t\t\tDiv(panel-heading){Write permissions}\n\t\t\t\t\tDiv(panel-body){\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(\"Insert\")\n\t\t\t\t\t\t\tInput(Name: InsertPerm, Type: text, Value: #pre_permissions_insert#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(\"Update\")\n\t\t\t\t\t\t\tInput(Name: UpdatePerm, Type: text, Value: #pre_permissions_update#)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tLabel(\"New column\")\n\t\t\t\t\t\t\tInput(Name: NewColumnPerm, Type: text, Value: #pre_permissions_new_column#)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tDiv(panel-footer){\n\t\t\t\t\t\tButton(Body: \"Save\", Class: btn btn-primary, Contract: @1EditTable, Page: app_tables, Params: \"Name=#pre_name#\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(col-md-6){\n\t\t\t\tDiv(panel panel-default){\n\t\t\t\t\tDiv(panel-heading){Conditions for changing permissions}\n\t\t\t\t\tDiv(panel-body){\n\t\t\t\t\t\tDiv(form-group){\n\t\t\t\t\t\t\tInput(Name: Insert_condition, Disabled: true, Type: text, Value: #pre_conditions#)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
            "Name": "table_edit",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(tables).WhereId(#tabl_id#).Columns(\"id,name\").Vars(pre)\n\n    SetTitle(\"Tables\")\n    Div(breadcrumb){\n        LinkPage(\"Tables\", app_tables)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(#pre_name#, text-muted)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        LinkPage(Body:\"Edit\", Page: table_edit, PageParams: \"tabl_id=#tabl_id#\")\n    }\n\n    DBFind(#pre_name#).Count(count)\n    If(#page#>0){\n        SetVar(prev_page,Calculate(#page#-1)\n    }.Else{\n        SetVar(page,0).(prev_page,0)\n    }\n    SetVar(per_page,25).(off,Calculate(#page#*#per_page#)).(last_page,Calculate(#count#/#per_page#)).(next_page,#last_page#)\n    If(#count#>Calculate(#off#+#per_page#)){\n        SetVar(next_page,Calculate(#page#+1)\n    }\n    Div(button-group){\n        If(#page#>0){\n            Button(Body:\"1\", Class:btn btn-default, Page:table_view, PageParams: \"tabl_id=#tabl_id#,page=0\")\n        }.Else{\n            Button(Body:\"1\", Class:btn btn-default disabled)\n        }\n        If(#page#>1){\n            Button(Body:Calculate(#prev_page#+1), Class:btn btn-default, Page:table_view, PageParams: \"tabl_id=#tabl_id#,page=#prev_page#\")\n        }\n\t\tIf(And(#page#>0,#page#<#last_page#)){\n            Button(Body:Calculate(#page#+1), Class:btn btn-default disabled)\n        }\n        If(#next_page#<#last_page#){\n            Button(Body:Calculate(#next_page#+1), Class:btn btn-default, Page:table_view, PageParams: \"tabl_id=#tabl_id#,page=#next_page#\")\n        }\n        If(#page#<#last_page#){\n            Button(Body:Calculate(#last_page#+1), Class:btn btn-default, Page:table_view, PageParams: \"tabl_id=#tabl_id#,page=#last_page#\")\n        }.ElseIf(#last_page#>0){\n\t\t\tButton(Body:Calculate(#last_page#+1), Class:btn btn-default disabled)\n\t\t}\n    }\n    Div(panel panel-default){\n        Div(panel-body){\n            Div(table-responsive){\n                DBFind(#pre_name#, src_mem).Offset(#off#).Order(id)\n                Table(src_mem)\n            }\n        }\n    }\n}",
            "Name": "table_view",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DelApplication {\n    data {\n        ApplicationId int\n        Value int \"optional\"\n    }\n\n    conditions {\n        if $Value < 0 || $Value > 1 {\n            error \"Incorrect value\"\n        }\n        RowConditions(\"applications\", $ApplicationId, false)\n    }\n\n    action {\n        DBUpdate(\"applications\", $ApplicationId, \"deleted\", $Value)\n    }\n}",
            "Name": "DelApplication",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditAppParam {\n    data {\n        Id int\n        Value string \"optional\"\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value\n    }\n\n    conditions {\n        RowConditions(\"app_params\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n\n    action {\n        var pars, vals array\n        if $Value {\n            pars[0] = \"value\"\n            vals[0] = $Value\n        }\n        if $Conditions {\n            pars = Append(pars, \"conditions\")\n            vals = Append(vals, $Conditions)\n        }\n        if Len(vals) > 0 {\n            DBUpdate(\"app_params\", $Id, Join(pars, \",\"), vals...)\n        }\n    }\n}",
            "Name": "EditAppParam",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditApplication {\n    data {\n        ApplicationId int\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && false\n    }\n\n    conditions {\n        RowConditions(\"applications\", $ApplicationId, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n\n    action {\n        var pars, vals array\n        if $Conditions {\n            pars[0] = \"conditions\"\n            vals[0] = $Conditions\n        }\n        if Len(vals) > 0 {\n            DBUpdate(\"applications\", $ApplicationId, Join(pars, \",\"), vals...)\n        }\n    }\n}",
            "Name": "EditApplication",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditBlock {\n    data {\n        Id int\n        Value string \"optional\"\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value\n    }\n\n    conditions {\n        RowConditions(\"blocks\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n\n    action {\n        var pars, vals array\n        if $Value {\n            pars[0] = \"value\"\n            vals[0] = $Value\n        }\n        if $Conditions {\n            pars = Append(pars, \"conditions\")\n            vals = Append(vals, $Conditions)\n        }\n        if Len(vals) > 0 {\n            DBUpdate(\"blocks\", $Id, Join(pars, \",\"), vals...)\n        }\n    }\n}",
            "Name": "EditBlock",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditColumn {\n    data {\n        TableName string\n        Name string\n        Permissions string\n    }\n\n    conditions {\n        ColumnCondition($TableName, $Name, \"\", $Permissions)\n    }\n\n    action {\n        PermColumn($TableName, $Name, $Permissions)\n    }\n}",
            "Name": "EditColumn",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditContract {\n    data {\n        Id int\n        Value string \"optional\"\n        Conditions string \"optional\"\n        WalletId string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value && !$WalletId\n    }\n\n    conditions {\n        RowConditions(\"contracts\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n        $cur = DBFind(\"contracts\").Columns(\"id,value,conditions,active,wallet_id,token_id\").WhereId($Id).Row()\n        if !$cur {\n            error Sprintf(\"Contract %d does not exist\", $Id)\n        }\n        if $Value {\n            ValidateEditContractNewValue($Value, $cur[\"value\"])\n        }\n        if $WalletId != \"\" {\n            $recipient = AddressToId($WalletId)\n            if $recipient == 0 {\n                error Sprintf(\"New contract owner %s is invalid\", $WalletId)\n            }\n            if Int($cur[\"active\"]) == 1 {\n                error \"Contract must be deactivated before wallet changing\"\n            }\n        } else {\n            $recipient = Int($cur[\"wallet_id\"])\n        }\n    }\n\n    action {\n        UpdateContract($Id, $Value, $Conditions, $WalletId, $recipient, $cur[\"active\"], $cur[\"token_id\"])\n    }\n    func rollback() {\n        RollbackEditContract()\n    }\n}",
            "Name": "EditContract",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditLang {\n    data {\n        Id int\n        Trans string\n    }\n\n    conditions {\n        EvalCondition(\"parameters\", \"changing_language\", \"value\")\n        $lang = DBFind(\"languages\").Where(\"id=?\", $Id).Row()\n    }\n\n    action {\n        EditLanguage($Id, $lang[\"name\"], $Trans, Int($lang[\"app_id\"]))\n    }\n}",
            "Name": "EditLang",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditLangJoint {\n    data {\n        Id int\n        ValueArr array\n        LocaleArr array\n    }\n\n    conditions {\n        var i int\n        while i < Len($LocaleArr) {\n            if Size($LocaleArr[i]) == 0 {\n                info(\"Locale is empty\")\n            }\n            if Size($ValueArr[i]) == 0 {\n                info(\"Value is empty\")\n            }\n            i = i + 1\n        }\n    }\n\n    action {\n        var i int\n        var Trans map\n        while i < Len($LocaleArr) {\n            Trans[$LocaleArr[i]] = $ValueArr[i]\n            i = i + 1\n        }\n        var params map\n        params[\"Id\"] = $Id \n        params[\"Trans\"] = JSONEncode(Trans)\n        CallContract(\"EditLang\", params)\n    }\n}",
            "Name": "EditLangJoint",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditMenu {\n    data {\n        Id int\n        Value string \"optional\"\n        Title string \"optional\"\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value && !$Title\n    }\n\n    conditions {\n        RowConditions(\"menu\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n\n    action {\n        var pars, vals array\n        if $Value {\n            pars[0] = \"value\"\n            vals[0] = $Value\n        }\n        if $Title {\n            pars = Append(pars, \"title\")\n            vals = Append(vals, $Title)\n        }\n        if $Conditions {\n            pars = Append(pars, \"conditions\")\n            vals = Append(vals, $Conditions)\n        }\n        if Len(vals) > 0 {\n            DBUpdate(\"menu\", $Id, Join(pars, \",\"), vals...)\n        }            \n    }\n}",
            "Name": "EditMenu",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditPage {\n    data {\n        Id int\n        Value string \"optional\"\n        Menu string \"optional\"\n        Conditions string \"optional\"\n        ValidateCount int \"optional\"\n        ValidateMode string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value && !$Menu && !$ValidateCount \n    }\n    func preparePageValidateCount(count int) int {\n        var min, max int\n        min = Int(EcosysParam(\"min_page_validate_count\"))\n        max = Int(EcosysParam(\"max_page_validate_count\"))\n        if count < min {\n            count = min\n        } else {\n            if count > max {\n                count = max\n            }\n        }\n        return count\n    }\n\n    conditions {\n        RowConditions(\"pages\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n        $ValidateCount = preparePageValidateCount($ValidateCount)\n    }\n\n    action {\n        var pars, vals array\n        if $Value {\n            pars[0] = \"value\"\n            vals[0] = $Value\n        }\n        if $Menu {\n            pars = Append(pars, \"menu\")\n            vals = Append(vals, $Menu)\n        }\n        if $Conditions {\n            pars = Append(pars, \"conditions\")\n            vals = Append(vals, $Conditions)\n        }\n        if $ValidateCount {\n            pars = Append(pars, \"validate_count\")\n            vals = Append(vals, $ValidateCount)\n        }\n        if $ValidateMode {\n            if $ValidateMode != \"1\" {\n                $ValidateMode = \"0\"\n            }\n            pars = Append(pars, \"validate_mode\")\n            vals = Append(vals, $ValidateMode)\n        }\n        if Len(vals) > 0 {\n            DBUpdate(\"pages\", $Id, Join(pars, \",\"), vals...)\n        }\n    }\n}",
            "Name": "EditPage",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditParameter {\n    data {\n        Id int\n        Value string \"optional\"\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && !$Value\n    }\n\n    conditions {\n        RowConditions(\"parameters\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n\n    action {\n        var pars, vals array\n        if $Value {\n            pars[0] = \"value\"\n            vals[0] = $Value\n        }\n        if $Conditions {\n            pars = Append(pars, \"conditions\")\n            vals = Append(vals, $Conditions)\n        }\n        if Len(vals) > 0 {\n            DBUpdate(\"parameters\", $Id, Join(pars, \",\"), vals...)\n        }\n    }\n}",
            "Name": "EditParameter",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditSign {\n    data {\n        Id int\n        Value string \"optional\"\n        Conditions string \"optional\"\n    }\n    func onlyConditions() bool {\n        return $Conditions && false\n    }\n\n    conditions {\n        RowConditions(\"signatures\", $Id, onlyConditions())\n        if $Conditions {\n            ValidateCondition($Conditions, $ecosystem_id)\n        }\n    }\n    action {\n        var pars, vals array\n        if $Value {\n            pars[0] = \"value\"\n            vals[0] = $Value\n        }\n        if $Conditions {\n            pars = Append(pars, \"conditions\")\n            vals = Append(vals, $Conditions)\n        }\n        if Len(vals) > 0 {\n            DBUpdate(\"signatures\", $Id, Join(pars, \",\"), vals...)\n        }\n    }\n}",
            "Name": "EditSign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditSignJoint {\n    data {\n        Id int\n        Title string\n        Parameter string\n        Conditions string\n    }\n\n    conditions {\n        if !$Title {\n            info(\"Title is empty\")\n        }\n        if !$Parameter {\n            info(\"Parameter is empty\")\n        }\n    }\n\n    action {\n        var Value map\n        Value[\"title\"] = $Title \n        Value[\"params\"] = $Parameter\n\n        var params map\n        params[\"Id\"] = $Id \n        params[\"Value\"] = JSONEncode(Value)\n        params[\"Conditions\"] = $Conditions\n        CallContract(\"EditSign\", params)\n    }\n}",
            "Name": "EditSignJoint",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract EditTable {\n    data {\n        Name string\n        InsertPerm string\n        UpdatePerm string\n        NewColumnPerm string\n    }\n\n    conditions {\n        if !$InsertPerm {\n            info(\"Insert condition is empty\")\n        }\n        if !$UpdatePerm {\n            info(\"Update condition is empty\")\n        }\n        if !$NewColumnPerm {\n            info(\"New column condition is empty\")\n        }\n\n        var permissions map\n        permissions[\"insert\"] = $InsertPerm\n        permissions[\"update\"] = $UpdatePerm\n        permissions[\"new_column\"] = $NewColumnPerm\n        $Permissions = permissions\n        TableConditions($Name, \"\", JSONEncode($Permissions))\n    }\n\n    action {\n        PermTable($Name, JSONEncode($Permissions))\n    }\n}",
            "Name": "EditTable",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract UploadBinary {\n    data {\n        ApplicationId int\n        Name string\n        Data bytes \"file\"\n        DataMimeType string \"optional\"\n    }\n\n    conditions {\n        $Id = Int(DBFind(\"binaries\").Columns(\"id\").Where(\"app_id = ? AND member_id = ? AND name = ?\", $ApplicationId, $key_id, $Name).One(\"id\"))\n\n        if $Id == 0 {\n            if $ApplicationId == 0 {\n                warning \"Application id cannot equal 0\"\n            }\n        }\n    }\n    action {\n        var hash string\n        hash = Hash($Data)\n\n        if $DataMimeType == \"\" {\n            $DataMimeType = \"application/octet-stream\"\n        }\n\n        if $Id != 0 {\n            DBUpdate(\"binaries\", $Id, \"data,hash,mime_type\", $Data, hash, $DataMimeType)\n        } else {\n            $Id = DBInsert(\"binaries\", \"app_id,member_id,name,data,hash,mime_type\", $ApplicationId, $key_id, $Name, $Data, hash, $DataMimeType)\n        }\n\n        $result = $Id\n    }\n}",
            "Name": "UploadBinary",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ExportNewApp {\n    data {\n        ApplicationId int\n    }\n\n    conditions {\n        $app_map = DBFind(\"applications\").Columns(\"id,name\").Where(\"id=$\", $ApplicationId).Row()\n        if !$app_map{\n            warning \"Application not found\"\n        }\n    }\n\n    action {\n\n        //=====================================================================================================\n        //------------------------------------Menu search------------------------------------------------------\n        var i int\n        var pages_array array\n        var menu_name_array array\n        var menu_id_array array\n\n        i = 0\n        var pages_ret array\n        pages_ret = DBFind(\"pages\").Where(\"app_id=?\", $ApplicationId)\n        while i < Len(pages_ret) {\n            var page_map map\n            page_map = pages_ret[i]\n\n            pages_array = Append(pages_array, Sprintf(\"'%v'\", Str(page_map[\"menu\"])))\n            i = i + 1\n        }\n\n        if Len(pages_array) > 0 {\n            var where_for_menu string\n            where_for_menu = Sprintf(\"name in (%v)\", Join(pages_array, \",\"))\n\n            i = 0\n            var menu_ret array\n            menu_ret = DBFind(\"menu\").Where(where_for_menu)\n            while i < Len(menu_ret) {\n                var menu_map map\n                menu_map = menu_ret[i]\n\n                menu_name_array = Append(menu_name_array, Str(menu_map[\"name\"]))\n                menu_id_array = Append(menu_id_array, Str(menu_map[\"id\"]))\n                i = i + 1\n            }\n        }\n\n        //=====================================================================================================\n        //------------------------------------Creating settings------------------------------------------------\n\n        var value map\n        value[\"app_id\"] = Str($ApplicationId)\n        value[\"app_name\"] = Str($app_map[\"name\"])\n\n        if Len(menu_name_array) > 0 {\n            value[\"menu_id\"] = Str(Join(menu_id_array, \", \"))\n            value[\"menu_name\"] = Str(Join(menu_name_array, \", \"))\n            value[\"count_menu\"] = Str(Len(menu_name_array))\n        } else {\n            value[\"menu_id\"] = \"0\"\n            value[\"menu_name\"] = \"\"\n            value[\"count_menu\"] = \"0\"\n        }\n\n        $buffer_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"export\").One(\"id\")\n        if !$buffer_id {\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"export\", value)\n        } else {\n            DBUpdate(\"buffer_data\", Int($buffer_id), \"value\", value)\n        }\n    }\n}",
            "Name": "ExportNewApp",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Import {\n    data {\n        Data string\n    }\n    func ReplaceValue(s string) string {\n        s = Replace(s, \"#IMPORT_ECOSYSTEM_ID#\", \"#ecosystem_id#\")\n        s = Replace(s, \"#IMPORT_KEY_ID#\", \"#key_id#\")\n        s = Replace(s, \"#IMPORT_ISMOBILE#\", \"#isMobile#\")\n        s = Replace(s, \"#IMPORT_ROLE_ID#\", \"#role_id#\")\n        s = Replace(s, \"#IMPORT_ECOSYSTEM_NAME#\", \"#ecosystem_name#\")\n        s = Replace(s, \"#IMPORT_APP_ID#\", \"#app_id#\")\n        return s\n    }\n\n    conditions {\n        $Data = ReplaceValue($Data)\n\n        $ApplicationId = 0\n        var app_map map\n        app_map = DBFind(\"buffer_data\").Columns(\"value->app_name\").Where(\"key='import_info' and member_id=$\", $key_id).Row()\n        if app_map{\n            var app_id int\n            app_id = DBFind(\"applications\").Columns(\"id\").Where(\"name=$\", Str(app_map[\"value.app_name\"])).One(\"id\")\n            if app_id {\n                $ApplicationId = Int(app_id)\n            }\n        }\n    }\n\n    action {\n        var editors, creators map\n        editors[\"pages\"] = \"EditPage\"\n        editors[\"blocks\"] = \"EditBlock\"\n        editors[\"menu\"] = \"EditMenu\"\n        editors[\"app_params\"] = \"EditAppParam\"\n        editors[\"languages\"] = \"EditLang\"\n        editors[\"contracts\"] = \"EditContract\"\n        editors[\"tables\"] = \"\" // nothing\n\n        creators[\"pages\"] = \"NewPage\"\n        creators[\"blocks\"] = \"NewBlock\"\n        creators[\"menu\"] = \"NewMenu\"\n        creators[\"app_params\"] = \"NewAppParam\"\n        creators[\"languages\"] = \"NewLang\"\n        creators[\"contracts\"] = \"NewContract\"\n        creators[\"tables\"] = \"NewTable\"\n\n        var dataImport array\n        dataImport = JSONDecode($Data)\n        var i int\n        while i<Len(dataImport){\n            var item, cdata map\n            cdata = dataImport[i]\n            if cdata {\n                cdata[\"ApplicationId\"] = $ApplicationId\n                $Type = cdata[\"Type\"]\n                $Name = cdata[\"Name\"]\n\n                Println(Sprintf(\"import %v: %v\", $Type, cdata[\"Name\"]))\n\n                item = DBFind($Type).Where(\"name=?\", $Name).Row()\n                var contractName string\n                if item {\n                    contractName = editors[$Type]\n                    cdata[\"Id\"] = Int(item[\"id\"])\n                    if $Type == \"menu\"{\n                        var menu menuItem string\n                        menu = Replace(item[\"value\"], \" \", \"\")\n                        menu = Replace(menu, \"\\n\", \"\")\n                        menu = Replace(menu, \"\\r\", \"\")\n                        menuItem = Replace(cdata[\"Value\"], \" \", \"\")\n                        menuItem = Replace(menuItem, \"\\n\", \"\")\n                        menuItem = Replace(menuItem, \"\\r\", \"\")\n                        if Contains(menu, menuItem) {\n                            // ignore repeated\n                            contractName = \"\"\n                        }else{\n                            cdata[\"Value\"] = item[\"value\"] + \"\\n\" + cdata[\"Value\"]\n                        }\n                    }\n                } else {\n                    contractName = creators[$Type]\n                }\n\n                if contractName != \"\"{\n                    CallContract(contractName, cdata)\n                }\n            }\n            i=i+1\n        }\n        Println(Sprintf(\"> time: %v\", $time))\n    }\n}",
            "Name": "Import",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ImportUpload {\n    data {\n        input_file string \"file\"\n    }\n    func ReplaceValue(s string) string {\n        s = Replace(s, \"#ecosystem_id#\", \"#IMPORT_ECOSYSTEM_ID#\")\n        s = Replace(s, \"#key_id#\", \"#IMPORT_KEY_ID#\")\n        s = Replace(s, \"#isMobile#\", \"#IMPORT_ISMOBILE#\")\n        s = Replace(s, \"#role_id#\", \"#IMPORT_ROLE_ID#\")\n        s = Replace(s, \"#ecosystem_name#\", \"#IMPORT_ECOSYSTEM_NAME#\")\n        s = Replace(s, \"#app_id#\", \"#IMPORT_APP_ID#\")\n        return s\n    }\n\n    conditions {\n        $input_file = BytesToString($input_file)\n        $input_file = ReplaceValue($input_file)\n        $limit = 5 // data piece size of import\n\n        // init buffer_data, cleaning old buffer\n        var initJson map\n        $import_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"import\").One(\"id\")\n        if $import_id {\n            $import_id = Int($import_id)\n            DBUpdate(\"buffer_data\", $import_id, \"value\", initJson)\n        } else {\n            $import_id = DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"import\", initJson)\n        }\n\n        $info_id = DBFind(\"buffer_data\").Where(\"member_id=$ and key=$\", $key_id, \"import_info\").One(\"id\")\n        if $info_id {\n            $info_id = Int($info_id)\n            DBUpdate(\"buffer_data\", $info_id, \"value\", initJson)\n        } else {\n            $info_id = DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"import_info\", initJson)\n        }\n    }\n\n    action {\n        var input map\n        input = JSONDecode($input_file)\n        var arr_data array\n        arr_data = input[\"data\"]\n\n        var pages_arr, blocks_arr, menu_arr, parameters_arr, languages_arr, contracts_arr, tables_arr array\n\n        // import info\n        var i int\n        while i<Len(arr_data){\n            var tmp_object map\n            tmp_object = arr_data[i]\n\n            if tmp_object[\"Type\"] == \"pages\" {\n                pages_arr = Append(pages_arr, Str(tmp_object[\"Name\"]))\n            }\n            if tmp_object[\"Type\"] == \"blocks\" {\n                blocks_arr = Append(blocks_arr, Str(tmp_object[\"Name\"]))\n            }\n            if tmp_object[\"Type\"] == \"menu\" {\n                menu_arr = Append(menu_arr, Str(tmp_object[\"Name\"]))\n            }\n            if tmp_object[\"Type\"] == \"app_params\" {\n                parameters_arr = Append(parameters_arr, Str(tmp_object[\"Name\"]))\n            }\n            if tmp_object[\"Type\"] == \"languages\" {\n                languages_arr = Append(languages_arr, Str(tmp_object[\"Name\"]))\n            }\n            if tmp_object[\"Type\"] == \"contracts\" {\n                contracts_arr = Append(contracts_arr, Str(tmp_object[\"Name\"]))\n            }\n            if tmp_object[\"Type\"] == \"tables\" {\n                tables_arr = Append(tables_arr, Str(tmp_object[\"Name\"]))\n            }\n\n            i = i + 1\n        }\n\n        var info_map map\n        info_map[\"app_name\"] = input[\"name\"]\n        info_map[\"pages\"] = Join(pages_arr, \", \")\n        info_map[\"pages_count\"] = Len(pages_arr)\n        info_map[\"blocks\"] = Join(blocks_arr, \", \")\n        info_map[\"blocks_count\"] = Len(blocks_arr)\n        info_map[\"menu\"] = Join(menu_arr, \", \")\n        info_map[\"menu_count\"] = Len(menu_arr)\n        info_map[\"parameters\"] = Join(parameters_arr, \", \")\n        info_map[\"parameters_count\"] = Len(parameters_arr)\n        info_map[\"languages\"] = Join(languages_arr, \", \")\n        info_map[\"languages_count\"] = Len(languages_arr)\n        info_map[\"contracts\"] = Join(contracts_arr, \", \")\n        info_map[\"contracts_count\"] = Len(contracts_arr)\n        info_map[\"tables\"] = Join(tables_arr, \", \")\n        info_map[\"tables_count\"] = Len(tables_arr)\n\n        if 0 == Len(pages_arr) + Len(blocks_arr) + Len(menu_arr) + Len(parameters_arr) + Len(languages_arr) + Len(contracts_arr) + Len(tables_arr) {\n            warning \"Invalid or empty import file\"\n        }\n\n        // import data\n        // the contracts is imported in one piece, the rest is cut under the $limit, a crutch to bypass the error when you import dependent contracts in different pieces\n        i=0\n        var sliced contracts array, arr_data_len int\n        arr_data_len = Len(arr_data)\n        while i <arr_data_len{\n            var part array, l int, tmp map\n            while l < $limit && (i+l < arr_data_len) {\n                tmp = arr_data[i+l]\n                if tmp[\"Type\"] == \"contracts\" {\n                    contracts = Append(contracts, tmp)\n                }else{\n                    part = Append(part, tmp)\n                }\n                l=l+1\n            }\n            var batch map\n            batch[\"Data\"] = JSONEncode(part)\n            sliced = Append(sliced, batch)\n            i=i+$limit\n        }\n        if Len(contracts) > 0{\n            var batch map\n            batch[\"Data\"] = JSONEncode(contracts)\n            sliced = Append(sliced, batch)\n        }\n        input[\"data\"] = sliced\n\n        // storing\n        DBUpdate(\"buffer_data\", $import_id, \"value\", input)\n        DBUpdate(\"buffer_data\", $info_id, \"value\", info_map)\n\n        var app_id int\n        app_id = DBFind(\"applications\").Columns(\"id\").Where(\"name=$\", Str(input[\"name\"])).One(\"id\")\n\n        if !app_id {\n            DBInsert(\"applications\", \"name,conditions\", Str(input[\"name\"]), \"true\")\n        }\n    }\n}",
            "Name": "ImportUpload",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ItemChangeAppId {\n    data {\n        Table string\n        AppId int\n        Id int\n    }\n\n    conditions {\n        $item = DBFind($Table).Where(\"id=?\",$Id).Row()\n        if !$item{\n            warning \"Item not found\"\n        }\n    }\n\n    action {\n        DBUpdate($Table, Int($item[\"id\"]), \"app_id\", $AppId)\n    }\n}",
            "Name": "ItemChangeAppId",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewAppParam {\n    data {\n        ApplicationId int\n        Name string\n        Value string\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"app_params\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Application parameter %s already exists\", $Name)\n        }\n    }\n\n    action {\n        DBInsert(\"app_params\", \"app_id,name,value,conditions\", $ApplicationId, $Name, $Value, $Conditions)\n    }\n}",
            "Name": "NewAppParam",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewApplication {\n    data {\n        Name string\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n\n        if Size($Name) == 0 {\n            warning \"Application name missing\"\n        }\n\n        if DBFind(\"applications\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Application %s already exists\", $Name)\n        }\n    }\n\n    action {\n        $result = DBInsert(\"applications\", \"name,conditions\", $Name, $Conditions)\n    }\n}",
            "Name": "NewApplication",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewBlock {\n    data {\n        ApplicationId int\n        Name string\n        Value string\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"blocks\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Block %s already exists\", $Name)\n        }\n    }\n\n    action {\n        DBInsert(\"blocks\", \"name,value,conditions,app_id\", $Name, $Value, $Conditions, $ApplicationId)\n    }\n}",
            "Name": "NewBlock",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewColumn {\n    data {\n        TableName string\n        Name string\n        Type string\n        Permissions string\n    }\n    conditions {\n        ColumnCondition($TableName, $Name, $Type, $Permissions)\n    }\n    action {\n        CreateColumn($TableName, $Name, $Type, $Permissions)\n    }\n    func rollback() {\n        RollbackColumn($TableName, $Name)\n    }\n    func price() int {\n        return SysParamInt(\"column_price\")\n    }\n}",
            "Name": "NewColumn",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewContract {\n    data {\n        ApplicationId int\n        Value string\n        Conditions string\n        Wallet string \"optional\"\n        TokenEcosystem int \"optional\"\n    }\n\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        $walletContract = $key_id\n        if $Wallet {\n            $walletContract = AddressToId($Wallet)\n            if $walletContract == 0 {\n                error Sprintf(\"wrong wallet %s\", $Wallet)\n            }\n        }\n\n        $contract_name = ContractName($Value)\n\n        if !$contract_name {\n            error \"must be the name\"\n        }\n\n        if !$TokenEcosystem {\n            $TokenEcosystem = 1\n        } else {\n            if !SysFuel($TokenEcosystem) {\n                warning Sprintf(\"Ecosystem %d is not system\", $TokenEcosystem)\n            }\n        }\n    }\n\n    action {\n        $result = CreateContract($contract_name, $Value, $Conditions, $walletContract, $TokenEcosystem, $ApplicationId)\n    }\n    func rollback() {\n        RollbackNewContract($Value)\n    }\n    func price() int {\n        return SysParamInt(\"contract_price\")\n    }\n}",
            "Name": "NewContract",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewLang {\n    data {\n        ApplicationId int\n        Name string\n        Trans string\n    }\n\n    conditions {\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"languages\").Columns(\"id\").Where(\"name = ? and app_id = ?\", $Name, $ApplicationId).One(\"id\") {\n            warning Sprintf( \"Language resource %s already exists\", $Name)\n        }\n\n        EvalCondition(\"parameters\", \"changing_language\", \"value\")\n    }\n\n    action {\n        CreateLanguage($Name, $Trans, $ApplicationId)\n    }\n}",
            "Name": "NewLang",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewLangJoint {\n    data {\n        ApplicationId int\n        Name string\n        ValueArr array\n        LocaleArr array\n    }\n\n    conditions {\n        var i int\n        while i < Len($LocaleArr) {\n            if Size($LocaleArr[i]) == 0 {\n                info(\"Locale is empty\")\n            }\n            if Size($ValueArr[i]) == 0 {\n                info(\"Value is empty\")\n            }\n            i = i + 1\n        }\n    }\n\n    action {\n        var i int\n        var Trans map\n        while i < Len($LocaleArr) {\n            Trans[$LocaleArr[i]] = $ValueArr[i]\n            i = i + 1\n        }\n        var params map\n        params[\"ApplicationId\"] = $ApplicationId \n        params[\"Name\"] = $Name\n        params[\"Trans\"] = JSONEncode(Trans)\n        CallContract(\"NewLang\", params)\n    }\n}",
            "Name": "NewLangJoint",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewMenu {\n    data {\n        Name string\n        Value string\n        Title string \"optional\"\n        Conditions string\n    }\n\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n\n        if DBFind(\"menu\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Menu %s already exists\", $Name)\n        }\n    }\n\n    action {\n        DBInsert(\"menu\", \"name,value,title,conditions\", $Name, $Value, $Title, $Conditions)\n    }\n    func price() int {\n        return SysParamInt(\"menu_price\")\n    }\n}",
            "Name": "NewMenu",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewPage {\n    data {\n        ApplicationId int\n        Name string\n        Value string\n        Menu string\n        Conditions string\n        ValidateCount int \"optional\"\n        ValidateMode string \"optional\"\n    }\n    func preparePageValidateCount(count int) int {\n        var min, max int\n        min = Int(EcosysParam(\"min_page_validate_count\"))\n        max = Int(EcosysParam(\"max_page_validate_count\"))\n\n        if count < min {\n            count = min\n        } else {\n            if count > max {\n                count = max\n            }\n        }\n        return count\n    }\n\n    conditions {\n        ValidateCondition($Conditions,$ecosystem_id)\n\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n\n        if DBFind(\"pages\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf( \"Page %s already exists\", $Name)\n        }\n\n        $ValidateCount = preparePageValidateCount($ValidateCount)\n\n        if $ValidateMode {\n            if $ValidateMode != \"1\" {\n                $ValidateMode = \"0\"\n            }\n        }\n    }\n\n    action {\n        DBInsert(\"pages\", \"name,value,menu,validate_count,validate_mode,conditions,app_id\", $Name, $Value, $Menu, $ValidateCount, $ValidateMode, $Conditions, $ApplicationId)\n    }\n    func price() int {\n        return SysParamInt(\"page_price\")\n    }\n}",
            "Name": "NewPage",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewParameter {\n    data {\n        Name string\n        Value string\n        Conditions string\n    }\n    \n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n        \n        if DBFind(\"parameters\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf(\"Parameter %s already exists\", $Name)\n        }\n    }\n    \n    action {\n        DBInsert(\"parameters\", \"name,value,conditions\", $Name, $Value, $Conditions)\n    }\n}",
            "Name": "NewParameter",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewSign {\n    data {\n        Name string\n        Value string\n        Conditions string\n    }\n    conditions {\n        ValidateCondition($Conditions, $ecosystem_id)\n\n        if DBFind(\"signatures\").Columns(\"id\").Where(\"name = ?\", $Name).One(\"id\") {\n            warning Sprintf(\"The signature %s already exists\", $Name)\n        }\n    }\n    action {\n        DBInsert(\"signatures\", \"name,value,conditions\", $Name, $Value, $Conditions)  \n    }\n}",
            "Name": "NewSign",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewSignJoint {\n    data {\n        Name string\n        Title string\n        ParamArr array\n        ValueArr array\n        Conditions string\n    }\n\n    conditions {\n        var i int\n        while i < Len($ParamArr) {\n            if Size($ParamArr[i]) == 0 {\n                info(\"Parameter is empty\")\n            }\n            if Size($ValueArr[i]) == 0 {\n                info(\"Value is empty\")\n            }\n            i = i + 1\n        }\n    }\n\n    action {\n        var par_arr array\n\n        var i int\n        while i < Len($ParamArr) {\n            var par_map map\n            par_map[\"name\"] = $ParamArr[i]\n            par_map[\"text\"] = $ValueArr[i]\n            par_arr = Append(par_arr, JSONEncode(par_map))\n            i = i + 1\n        }\n\n        var params map\n        params[\"Name\"] = $Name \n        params[\"Value\"] = Sprintf(`{\"title\":\"%v\",\"params\":[%v]}`, $Title, Join(par_arr, \",\"))\n        params[\"Conditions\"] = $Conditions\n        CallContract(\"NewSign\", params)\n    }\n}",
            "Name": "NewSignJoint",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewTable {\n    data {\n        ApplicationId int\n        Name string\n        Columns string\n        Permissions string\n    }\n    conditions {\n        if $ApplicationId == 0 {\n            warning \"Application id cannot equal 0\"\n        }\n        TableConditions($Name, $Columns, $Permissions)\n    }\n    \n    action {\n        CreateTable($Name, $Columns, $Permissions, $ApplicationId)\n    }\n    func rollback() {\n        RollbackTable($Name)\n    }\n    func price() int {\n        return SysParamInt(\"table_price\")\n    }\n}",
            "Name": "NewTable",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NewTableJoint {\n    data {\n        ApplicationId int\n        Name string\n        ColumnsArr array\n        TypesArr array\n        InsertPerm string\n        UpdatePerm string\n        NewColumnPerm string\n    }\n\n    conditions {\n        var i int\n        while i < Len($ColumnsArr) {\n            if Size($ColumnsArr[i]) == 0 {\n                info(\"Columns is empty\")\n            }\n            if Size($TypesArr[i]) == 0 {\n                info(\"Type is empty\")\n            }\n            i = i + 1\n        }\n    }\n\n    action {\n        var i int\n        var col_arr array\n        while i < Len($ColumnsArr) {\n            var col_map map\n            col_map[\"name\"] = $ColumnsArr[i]\n            col_map[\"type\"] = $TypesArr[i]\n            col_map[\"conditions\"] = \"true\"\n            col_arr[i] = JSONEncode(col_map)\n            i = i + 1\n        }\n\n        var Permissions map\n        Permissions[\"insert\"] = $InsertPerm \n        Permissions[\"update\"] = $UpdatePerm\n        Permissions[\"new_column\"] = $NewColumnPerm\n\n        var params map\n        params[\"ApplicationId\"] = $ApplicationId \n        params[\"Name\"] = $Name\n        params[\"Columns\"] = JSONEncode(col_arr)\n        params[\"Permissions\"] = JSONEncode(Permissions)\n        CallContract(\"NewTable\", params)\n    }\n}",
            "Name": "NewTableJoint",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Restore {\n    data {\n        Id int\n        Type string\n        IdHistory int\n    }\n    conditions {\n\n        if $Type != \"page\" && $Type != \"block\" && $Type != \"menu\" && $Type != \"contract\" {\n            warning \"Wrong type\"\n        }\n\n        if $Type == \"page\" {\n            $history = GetPageHistory($Id)\n        }\n\n        if $Type == \"block\" {\n            $history = GetBlockHistory($Id)\n        }\n\n        if $Type == \"menu\" {\n            $history = GetMenuHistory($Id)\n        } \n        \n        if $Type == \"contract\" {\n            $history = GetContractHistory($Id)\n        }\n    }\n    action {\n\n        var rec map\n        rec = $history[$IdHistory]\n\n        \n\n        \n        if $Type == \"page\" {\n            var params map\n            params[\"Value\"] = rec[\"value\"]\n            params[\"Menu\"] = rec[\"menu\"]\n            params[\"Conditions\"] = rec[\"conditions\"]\n            params[\"Id\"] = $Id\n            CallContract(\"1@EditPage\", params)\n        }\n\n        if $Type == \"block\" {\n            var params map\n            params[\"Id\"] = $Id\n            params[\"Value\"] = rec[\"value\"]\n            params[\"Conditions\"] = rec[\"conditions\"]\n            CallContract(\"1@EditBlock\", params)\n        }\n\n        if $Type == \"menu\" {\n            var params map\n            params[\"Id\"] = $Id\n            params[\"Value\"] = rec[\"value\"]\n            params[\"Conditions\"] = rec[\"conditions\"]\n            CallContract(\"1@EditMenu\", params)\n        } \n        \n        if $Type == \"contract\" {\n            var params map\n            params[\"Id\"] = $Id\n            params[\"Value\"] = rec[\"value\"]\n            params[\"Conditions\"] = rec[\"conditions\"]\n            CallContract(\"1@EditContract\", params)\n        }\n    }\n}",
            "Name": "Restore",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract SelectApp {\n    data {\n        ApplicationId int\n    }\n\n    conditions {\n        $app = DBFind(\"applications\").Columns(\"id,name\").Where(\"id=$\", $ApplicationId).Row()\n        if !$app{\n            warning \"Application not found\"\n        }\n    }\n\n    action {\n        var value map bufferId int\n        value[\"app_id\"] = Str($ApplicationId)\n        value[\"app_name\"] = $app[\"name\"]\n\n        bufferId = Int(DBFind(\"buffer_data\").Where(\"member_id=? and key=?\", $key_id, \"export\").One(\"id\"))\n        if bufferId >0 {\n            DBUpdate(\"buffer_data\", bufferId, \"value\", value)\n        } else {\n            DBInsert(\"buffer_data\", \"member_id,key,value\", $key_id, \"export\", value)\n        }\n    }\n}",
            "Name": "SelectApp",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract Export {\n    data {}\n\n    func escapeSpecials(s string) string {\n        s = Replace(s, `\\`, `\\\\`)\n        s = Replace(s, `\t`, `\\t`)\n        s = Replace(s, \"\\n\", `\\n`)\n        s = Replace(s, \"\\r\", `\\r`)\n        s = Replace(s, `\"`, `\\\"`)\n        if s == \"0\"{\n            s = \"\"\n        }\n        return s\n    }\n\n    func AssignAll(app_name string, resources string) string {\n        return Sprintf(`{\n            \"name\": \"%v\",\n            \"data\": [\n                %v\n            ]\n        }`, app_name, resources)\n    }\n\n    func serializeItem(item map, type string) string {\n        var s string\n        s = Sprintf(\n            `{\n                \"Type\": \"%v\",\n                \"Name\": \"%v\",\n                \"Value\": \"%v\",\n                \"Conditions\": \"%v\",\n                \"Menu\": \"%v\",\n                \"Title\": \"%v\",\n                \"Trans\": \"%v\",\n                \"Columns\": \"%v\",\n                \"Permissions\": \"%v\"\n            }`, type, escapeSpecials(Str(item[\"name\"])), escapeSpecials(Str(item[\"value\"])), escapeSpecials(Str(item[\"conditions\"])), escapeSpecials(Str(item[\"menu\"])), escapeSpecials(Str(item[\"title\"])), escapeSpecials(Str(item[\"res\"])), escapeSpecials(Str(item[\"columns\"])), escapeSpecials(Str(item[\"permissions\"]))\n        )\n        return s\n    }\n\n    func getTypeForColumns(table_name string, columnsJSON string) string {\n        var colsMap map, result columns array\n        colsMap = JSONDecode(columnsJSON)\n        columns = GetMapKeys(colsMap)\n        var i int\n        while i < Len(columns){\n            if Size(columns[i]) > 0 {\n                var col map\n                col[\"name\"] = columns[i]\n                col[\"conditions\"] = colsMap[col[\"name\"]]\n                col[\"type\"] = GetColumnType(table_name, col[\"name\"])\n                result = Append(result, col)\n            }\n            i = i + 1\n        }\n        return JSONEncode(result)\n    }\n\n    func exportTable(type string, result array) array {\n        var items array, limit offset int\n        limit = 250\n        while true{\n            var rows array, where string\n            if type == \"menu\" {\n                if Len($menus_names) > 0 {\n                    where = Sprintf(\"name in (%v)\", Join($menus_names, \",\"))\n                }\n            }else{\n                where = Sprintf(\"app_id=%v\", $ApplicationID)\n            }\n            if where {\n                rows = DBFind(type).Limit(limit).Offset(offset).Where(where)\n            }\n            if Len(rows) > 0{\n                var i int\n                while i<Len(rows){\n                    items = Append(items, rows[i])\n                    i=i+1\n                }\n            }else{\n                break\n            }\n            offset = offset+limit\n        }\n        var i int, item map\n        while i < Len(items) {\n            item = items[i]\n            if type == \"tables\" {\n                var table map\n                table[\"name\"] = item[\"name\"]\n                table[\"permissions\"] = item[\"permissions\"]\n                table[\"conditions\"] = item[\"conditions\"]\n                table[\"columns\"] = getTypeForColumns(item[\"name\"], item[\"columns\"])\n                item = table\n            }\n            result = Append(result, serializeItem(item, type))\n            if type == \"pages\" {\n                $menus_names = Append($menus_names, Sprintf(\"'%v'\", item[\"menu\"]))\n            }\n            i = i + 1\n        }\n        return result\n    }\n\n    conditions {\n        var buffer_map map\n        buffer_map = DBFind(\"buffer_data\").Columns(\"id,value->app_id,value->app_name\").Where(\"member_id=$ and key=$\", $key_id, \"export\").Row()\n        if !buffer_map{\n            warning \"Application not found\"\n        }\n        $ApplicationID = Int(buffer_map[\"value.app_id\"])\n        $ApplicationName = Str(buffer_map[\"value.app_name\"])\n\n        var menus_names array\n        $menus_names = menus_names\n    }\n\n    action {\n        var exportJSON string, items array\n        items = exportTable(\"pages\", items)\n        items = exportTable(\"contracts\", items)\n        items = exportTable(\"blocks\", items)\n        items = exportTable(\"languages\", items)\n        items = exportTable(\"app_params\", items)\n        items = exportTable(\"tables\", items)\n        items = exportTable(\"menu\", items)\n\n        exportJSON = AssignAll($ApplicationName, Join(items, \",\\r\\n\"))\n        UploadBinary(\"Name,Data,ApplicationId,DataMimeType\", \"export\", exportJSON, 1, \"application/json\")\n    }\n}",
            "Name": "Export",
            "Type": "contracts"
        }
    ]
}